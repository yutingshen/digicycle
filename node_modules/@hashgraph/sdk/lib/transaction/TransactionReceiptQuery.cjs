"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Query = _interopRequireWildcard(require("../query/Query.cjs"));

var _Status = _interopRequireDefault(require("../Status.cjs"));

var _TransactionReceipt = _interopRequireDefault(require("./TransactionReceipt.cjs"));

var _TransactionId = _interopRequireDefault(require("./TransactionId.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
 * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
 * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
 * @typedef {import("@hashgraph/proto").IResponseHeader} proto.IResponseHeader
 * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
 * @typedef {import("@hashgraph/proto").ITransactionGetReceiptQuery} proto.ITransactionGetReceiptQuery
 * @typedef {import("@hashgraph/proto").ITransactionGetReceiptResponse} proto.ITransactionGetReceiptResponse
 * @typedef {import("@hashgraph/proto").ResponseCodeEnum} proto.ResponseCodeEnum
 */

/**
 * @typedef {import("../account/AccountId.js").default} AccountId
 * @typedef {import("../channel/Channel.js").default} Channel
 */

/**
 * @augments {Query<TransactionReceipt>}
 */
class TransactionReceiptQuery extends _Query.default {
  /**
   * @param {object} [props]
   * @param {TransactionId | string} [props.transactionId]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {?TransactionId}
     */

    this._transactionId = null;

    if (props.transactionId != null) {
      this.setTransactionId(props.transactionId);
    }
  }
  /**
   * @internal
   * @param {proto.IQuery} query
   * @returns {TransactionReceiptQuery}
   */


  static _fromProtobuf(query) {
    const receipt =
    /** @type {proto.ITransactionGetReceiptQuery} */
    query.transactionGetReceipt;
    return new TransactionReceiptQuery({
      transactionId: receipt.transactionID ? _TransactionId.default._fromProtobuf(receipt.transactionID) : undefined
    });
  }
  /**
   * @returns {?TransactionId}
   */


  get transactionId() {
    return this._transactionId;
  }
  /**
   * Set the transaction ID for which the receipt is being requested.
   *
   * @param {TransactionId | string} transactionId
   * @returns {this}
   */


  setTransactionId(transactionId) {
    this._transactionId = transactionId instanceof _TransactionId.default ? transactionId : _TransactionId.default.fromString(transactionId);
    return this;
  }
  /**
   * @override
   * @protected
   * @returns {boolean}
   */


  _isPaymentRequired() {
    return false;
  }
  /**
   * @override
   * @protected
   * @param {Status} responseStatus
   * @param {proto.IResponse} response
   * @returns {boolean}
   */


  _shouldRetry(responseStatus, response) {
    switch (responseStatus) {
      case _Status.default.Busy:
      case _Status.default.Unknown:
      case _Status.default.ReceiptNotFound:
        return true;

      default: // continue to checking receipt status

    }

    const transactionGetReceipt =
    /** @type {proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    const receipt =
    /** @type {proto.ITransactionReceipt} */
    transactionGetReceipt.receipt;
    const receiptStatusCode =
    /** @type {proto.ResponseCodeEnum} */
    receipt.status;

    const receiptStatus = _Status.default._fromCode(receiptStatusCode);

    switch (receiptStatus) {
      case _Status.default.Ok:
      case _Status.default.Busy:
      case _Status.default.Unknown:
      case _Status.default.ReceiptNotFound:
        return true;

      default: // looks like its either success or some other error

    }

    return false;
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.IQuery} request
   * @returns {Promise<proto.IResponse>}
   */


  _execute(channel, request) {
    return channel.crypto.getTransactionReceipts(request);
  }
  /**
   * @override
   * @internal
   * @param {proto.IResponse} response
   * @returns {proto.IResponseHeader}
   */


  _mapResponseHeader(response) {
    const transactionGetReceipt =
    /** @type {proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    return (
      /** @type {proto.IResponseHeader} */
      transactionGetReceipt.header
    );
  }
  /**
   * @protected
   * @override
   * @param {proto.IResponse} response
   * @param {AccountId} nodeAccountId
   * @param {proto.IQuery} request
   * @returns {Promise<TransactionReceipt>}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  _mapResponse(response, nodeAccountId, request) {
    const transactionGetReceipt =
    /** @type {proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    const receipt =
    /** @type {proto.ITransactionReceipt} */
    transactionGetReceipt.receipt;
    return Promise.resolve(_TransactionReceipt.default._fromProtobuf(receipt));
  }
  /**
   * @override
   * @internal
   * @param {proto.IQueryHeader} header
   * @returns {proto.IQuery}
   */


  _onMakeRequest(header) {
    return {
      transactionGetReceipt: {
        header,
        transactionID: this._transactionId != null ? this._transactionId._toProtobuf() : null
      }
    };
  }

}

exports.default = TransactionReceiptQuery;

_Query.QUERY_REGISTRY.set("transactionGetReceipt", // eslint-disable-next-line @typescript-eslint/unbound-method
TransactionReceiptQuery._fromProtobuf);