/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransactionID} proto.ITransactionID
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
 */
/**
 * The client-generated ID for a transaction.
 *
 * This is used for retrieving receipts and records for a transaction, for appending to a file
 * right after creating it, for instantiating a smart contract with bytecode in a file just created,
 * and internally by the network for detecting when duplicate transactions are submitted.
 */
export default class TransactionId {
    /**
     * Generates a new transaction ID for the given account ID.
     *
     * Note that transaction IDs are made of the valid start of the transaction and the account
     * that will be charged the transaction fees for the transaction.
     *
     * @param {AccountId | string} id
     * @returns {TransactionId}
     */
    static generate(id: AccountId | string): TransactionId;
    /**
     * @param {string} id
     * @returns {TransactionId}
     */
    static fromString(id: string): TransactionId;
    /**
     * @internal
     * @param {proto.ITransactionID} id
     * @returns {TransactionId}
     */
    static _fromProtobuf(id: proto.ITransactionID): TransactionId;
    /**
     * @param {AccountId} accountId
     * @param {Timestamp} validStart
     */
    constructor(accountId: AccountId, validStart: Timestamp);
    /**
     * The Account ID that paid for this transaction.
     *
     * @readonly
     */
    readonly accountId: AccountId;
    /**
     * The time from when this transaction is valid.
     *
     * When a transaction is submitted there is additionally a validDuration (defaults to 120s)
     * and together they define a time window that a transaction may be processed in.
     *
     * @readonly
     */
    readonly validStart: Timestamp;
    /**
     * @returns {string}
     */
    toString(): string;
    /**
     * @internal
     * @returns {proto.ITransactionID}
     */
    _toProtobuf(): proto.ITransactionID;
}
import AccountId from "../account/AccountId.js";
import Timestamp from "../Timestamp.js";
declare namespace proto {
    type ITransactionID = import("@hashgraph/proto/lib/proto").proto.ITransactionID;
    type IAccountID = import("@hashgraph/proto/lib/proto").proto.IAccountID;
    type ITimestamp = import("@hashgraph/proto/lib/proto").proto.ITimestamp;
}
export {};
