"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _Timestamp = _interopRequireDefault(require("../Timestamp.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransactionID} proto.ITransactionID
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
 */

/**
 * The client-generated ID for a transaction.
 *
 * This is used for retrieving receipts and records for a transaction, for appending to a file
 * right after creating it, for instantiating a smart contract with bytecode in a file just created,
 * and internally by the network for detecting when duplicate transactions are submitted.
 */
class TransactionId {
  /**
   * @param {AccountId} accountId
   * @param {Timestamp} validStart
   */
  constructor(accountId, validStart) {
    /**
     * The Account ID that paid for this transaction.
     *
     * @readonly
     */
    this.accountId = accountId;
    /**
     * The time from when this transaction is valid.
     *
     * When a transaction is submitted there is additionally a validDuration (defaults to 120s)
     * and together they define a time window that a transaction may be processed in.
     *
     * @readonly
     */

    this.validStart = validStart;
    Object.freeze(this);
  }
  /**
   * Generates a new transaction ID for the given account ID.
   *
   * Note that transaction IDs are made of the valid start of the transaction and the account
   * that will be charged the transaction fees for the transaction.
   *
   * @param {AccountId | string} id
   * @returns {TransactionId}
   */


  static generate(id) {
    return new TransactionId(typeof id === "string" ? _AccountId.default.fromString(id) : id, _Timestamp.default.generate());
  }
  /**
   * @param {string} id
   * @returns {TransactionId}
   */


  static fromString(id) {
    const [account, time] = id.split("@");
    const [seconds, nanos] = time.split(".").map(Number);
    return new TransactionId(_AccountId.default.fromString(account), new _Timestamp.default(seconds, nanos));
  }
  /**
   * @returns {string}
   */


  toString() {
    return `${this.accountId.toString()}@${this.validStart.seconds}.${this.validStart.nanos}`;
  }
  /**
   * @internal
   * @param {proto.ITransactionID} id
   * @returns {TransactionId}
   */


  static _fromProtobuf(id) {
    return new TransactionId(_AccountId.default._fromProtobuf(
    /** @type {proto.IAccountID} */
    id.accountID), _Timestamp.default._fromProtobuf(
    /** @type {proto.ITimestamp} */
    id.transactionValidStart));
  }
  /**
   * @internal
   * @returns {proto.ITransactionID}
   */


  _toProtobuf() {
    return {
      accountID: this.accountId._toProtobuf(),
      transactionValidStart: this.validStart._toProtobuf()
    };
  }

}

exports.default = TransactionId;