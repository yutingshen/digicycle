/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
 * @typedef {import("@hashgraph/proto").IExchangeRateSet} proto.IExchangeRateSet
 * @typedef {import("@hashgraph/proto").IExchangeRate} proto.IExchangeRate
 */
/**
 * The consensus result for a transaction, which might not be currently known,
 * or may succeed or fail.
 */
export default class TransactionReceipt {
    /**
     * @internal
     * @param {proto.ITransactionReceipt} receipt
     * @returns {TransactionReceipt}
     */
    static _fromProtobuf(receipt: proto.ITransactionReceipt): TransactionReceipt;
    /**
     * @private
     * @param {object} props
     * @param {Status} props.status
     * @param {?AccountId} props.accountId
     * @param {?FileId} props.fileId
     * @param {?ContractId} props.contractId
     * @param {?TopicId} props.topicId
     * @param {?TokenId} props.tokenId
     * @param {?ExchangeRate} props.exchangeRate
     * @param {?Long} props.topicSequenceNumber
     * @param {?Uint8Array} props.topicRunningHash
     */
    private constructor();
    /**
     * Whether the transaction succeeded or failed (or is unknown).
     *
     * @readonly
     */
    readonly status: Status;
    /**
     * The account ID, if a new account was created.
     *
     * @readonly
     */
    readonly accountId: AccountId | null;
    /**
     * The file ID, if a new file was created.
     *
     * @readonly
     */
    readonly fileId: FileId | null;
    /**
     * The contract ID, if a new contract was created.
     *
     * @readonly
     */
    readonly contractId: ContractId | null;
    /**
     * The topic ID, if a new topic was created.
     *
     * @readonly
     */
    readonly topicId: TopicId | null;
    /**
     * The token ID, if a new token was created.
     *
     * @readonly
     */
    readonly tokenId: TokenId | null;
    /**
     * The exchange rate of Hbars to cents (USD).
     *
     * @readonly
     */
    readonly exchangeRate: ExchangeRate | null;
    /**
     * Updated sequence number for a consensus service topic.
     *
     * @readonly
     */
    readonly topicSequenceNumber: Long.Long | null;
    /**
     * Updated running hash for a consensus service topic.
     *
     * @readonly
     */
    readonly topicRunningHash: Uint8Array | null;
    /**
     * @internal
     * @returns {proto.ITransactionReceipt}
     */
    _toProtobuf(): proto.ITransactionReceipt;
}
import Status from "../Status.js";
import AccountId from "../account/AccountId.js";
import FileId from "../file/FileId.js";
import ContractId from "../contract/ContractId.js";
import TopicId from "../topic/TopicId.js";
import TokenId from "../token/TokenId.js";
import ExchangeRate from "../ExchangeRate.js";
import Long from "long";
declare namespace proto {
    type ITransactionReceipt = import("@hashgraph/proto/lib/proto").proto.ITransactionReceipt;
    type IExchangeRateSet = import("@hashgraph/proto/lib/proto").proto.IExchangeRateSet;
    type IExchangeRate = import("@hashgraph/proto/lib/proto").proto.IExchangeRate;
}
export {};
