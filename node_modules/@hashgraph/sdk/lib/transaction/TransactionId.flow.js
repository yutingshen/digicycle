/**
 * Flowtype definitions for TransactionId
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITransactionID">} ITransactionID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 */
/**
 * The client-generated ID for a transaction.
 *
 * This is used for retrieving receipts and records for a transaction, for appending to a file
 * right after creating it, for instantiating a smart contract with bytecode in a file just created,
 * and internally by the network for detecting when duplicate transactions are submitted.
 */
declare export default class TransactionId {
  /**
   * Generates a new transaction ID for the given account ID.
   *
   * Note that transaction IDs are made of the valid start of the transaction and the account
   * that will be charged the transaction fees for the transaction.
   * @param {AccountId | string} id
   * @returns {TransactionId}
   */
  static generate(id: AccountId | string): TransactionId;

  /**
   * @param {string} id
   * @returns {TransactionId}
   */
  static fromString(id: string): TransactionId;

  /**
   * @internal
   * @param {proto$ITransactionID} id
   * @returns {TransactionId}
   */
  static _fromProtobuf(id: proto$ITransactionID): TransactionId;

  /**
   * @param {AccountId} accountId
   * @param {Timestamp} validStart
   */
  constructor(accountId: AccountId, validStart: Timestamp): this;

  /**
   * The Account ID that paid for this transaction.
   * @readonly
   */
  +accountId: AccountId;

  /**
   * The time from when this transaction is valid.
   *
   * When a transaction is submitted there is additionally a validDuration (defaults to 120s)
   * and together they define a time window that a transaction may be processed in.
   * @readonly
   */
  +validStart: Timestamp;

  /**
   * @returns {string}
   */
  toString(): string;

  /**
   * @internal
   * @returns {proto$ITransactionID}
   */
  _toProtobuf(): proto$ITransactionID;
}
import AccountId from "../account/AccountId.js";
import Timestamp from "../Timestamp.js";
declare type proto$ITransactionID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
