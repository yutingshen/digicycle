/**
 * Flowtype definitions for TransactionRecord
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITransactionRecord">} ITransactionRecord
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITransactionReceipt">} ITransactionReceipt
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITransactionID">} ITransactionID
 */
/**
 * Response when the client sends the node TransactionGetRecordResponse.
 */
declare export default class TransactionRecord {
  /**
   * @internal
   * @param {proto$ITransactionRecord} record
   * @returns {TransactionRecord}
   */
  static _fromProtobuf(record: proto$ITransactionRecord): TransactionRecord;

  /**
   * @private
   * @param {object} props
   * @param {ContractFunctionResult} [props.contractFunctionResult]
   * @param {TransactionReceipt} props.receipt
   * @param {Uint8Array} props.transactionHash
   * @param {Timestamp} props.consensusTimestampstamp
   * @param {TransactionId} props.transactionId
   * @param {string} props.transactionMemo
   * @param {Hbar} props.transactionFee
   * @param {Transfer[]} props.transfers
   */
  constructor(): this;

  /**
   * The status (reach consensus, or failed, or is unknown) and the ID of
   * any new account/file/instance created.
   * @readonly
   */
  +receipt: TransactionReceipt;

  /**
   * The hash of the Transaction that executed (not the hash of any Transaction that failed
   * for having a duplicate TransactionID).
   * @readonly
   */
  +transactionHash: Uint8Array;

  /**
   * The consensus timestamp (or null if didn't reach consensus yet).
   * @readonly
   */
  +consensusTimestampstamp: Timestamp;

  /**
   * The ID of the transaction this record represents.
   * @readonly
   */
  +transactionId: TransactionId;

  /**
   * The memo that was submitted as part of the transaction (max 100 bytes).
   * @readonly
   */
  +transactionMemo: string;

  /**
   * The actual transaction fee charged,
   * not the original transactionFee value from TransactionBody.
   * @readonly
   */
  +transactionFee: Hbar;

  /**
   * All hbar transfers as a result of this transaction, such as fees, or transfers performed
   * by the transaction, or by a smart contract it calls, or by the creation of threshold
   * records that it triggers.
   * @readonly
   */
  +transfers: Transfer[];

  /**
   * Record of the value returned by the smart contract function or constructor.
   * @readonly
   */
  +contractFunctionResult: ContractFunctionResult | null;
}
import TransactionReceipt from "./TransactionReceipt.js";
import Timestamp from "../Timestamp.js";
import TransactionId from "./TransactionId.js";
import Hbar from "../Hbar.js";
import Transfer from "../Transfer.js";
import ContractFunctionResult from "../contract/ContractFunctionResult.js";
declare type proto$ITransactionRecord = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITransactionReceipt = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITransactionID = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
