"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _ContractId = _interopRequireDefault(require("../contract/ContractId.cjs"));

var _FileId = _interopRequireDefault(require("../file/FileId.cjs"));

var _TopicId = _interopRequireDefault(require("../topic/TopicId.cjs"));

var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));

var _ExchangeRate = _interopRequireDefault(require("../ExchangeRate.cjs"));

var _Status = _interopRequireDefault(require("../Status.cjs"));

var _long = _interopRequireDefault(require("long"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
 * @typedef {import("@hashgraph/proto").IExchangeRateSet} proto.IExchangeRateSet
 * @typedef {import("@hashgraph/proto").IExchangeRate} proto.IExchangeRate
 */

/**
 * The consensus result for a transaction, which might not be currently known,
 * or may succeed or fail.
 */
class TransactionReceipt {
  /**
   * @private
   * @param {object} props
   * @param {Status} props.status
   * @param {?AccountId} props.accountId
   * @param {?FileId} props.fileId
   * @param {?ContractId} props.contractId
   * @param {?TopicId} props.topicId
   * @param {?TokenId} props.tokenId
   * @param {?ExchangeRate} props.exchangeRate
   * @param {?Long} props.topicSequenceNumber
   * @param {?Uint8Array} props.topicRunningHash
   */
  constructor(props) {
    /**
     * Whether the transaction succeeded or failed (or is unknown).
     *
     * @readonly
     */
    this.status = props.status;
    /**
     * The account ID, if a new account was created.
     *
     * @readonly
     */

    this.accountId = props.accountId;
    /**
     * The file ID, if a new file was created.
     *
     * @readonly
     */

    this.fileId = props.fileId;
    /**
     * The contract ID, if a new contract was created.
     *
     * @readonly
     */

    this.contractId = props.contractId;
    /**
     * The topic ID, if a new topic was created.
     *
     * @readonly
     */

    this.topicId = props.topicId;
    /**
     * The token ID, if a new token was created.
     *
     * @readonly
     */

    this.tokenId = props.tokenId;
    /**
     * The exchange rate of Hbars to cents (USD).
     *
     * @readonly
     */

    this.exchangeRate = props.exchangeRate;
    /**
     * Updated sequence number for a consensus service topic.
     *
     * @readonly
     */

    this.topicSequenceNumber = props.topicSequenceNumber;
    /**
     * Updated running hash for a consensus service topic.
     *
     * @readonly
     */

    this.topicRunningHash = props.topicRunningHash;
    Object.freeze(this);
  }
  /**
   * @internal
   * @returns {proto.ITransactionReceipt}
   */


  _toProtobuf() {
    return {
      status: this.status.valueOf(),
      accountID: this.accountId != null ? this.accountId._toProtobuf() : null,
      fileID: this.fileId != null ? this.fileId._toProtobuf() : null,
      contractID: this.contractId != null ? this.contractId._toProtobuf() : null,
      topicID: this.topicId != null ? this.topicId._toProtobuf() : null,
      tokenId: this.topicId != null ? this.topicId._toProtobuf() : null,
      topicRunningHash: this.topicRunningHash == null ? null : this.topicRunningHash,
      topicSequenceNumber: this.topicSequenceNumber,
      exchangeRate: {
        nextRate: null,
        currentRate: this.exchangeRate != null ? this.exchangeRate._toProtobuf() : null
      }
    };
  }
  /**
   * @internal
   * @param {proto.ITransactionReceipt} receipt
   * @returns {TransactionReceipt}
   */


  static _fromProtobuf(receipt) {
    const exchangeRateSet =
    /** @type {proto.IExchangeRateSet} */
    receipt.exchangeRate;
    return new TransactionReceipt({
      status: _Status.default._fromCode(receipt.status != null ? receipt.status : 0),
      accountId: receipt.accountID != null ? _AccountId.default._fromProtobuf(receipt.accountID) : null,
      fileId: receipt.fileID != null ? _FileId.default._fromProtobuf(receipt.fileID) : null,
      contractId: receipt.contractID != null ? _ContractId.default._fromProtobuf(receipt.contractID) : null,
      topicId: receipt.topicID != null ? _TopicId.default._fromProtobuf(receipt.topicID) : null,
      tokenId: receipt.tokenId != null ? _TokenId.default._fromProtobuf(receipt.tokenId) : null,
      exchangeRate: receipt.exchangeRate != null ? _ExchangeRate.default._fromProtobuf(
      /** @type {proto.IExchangeRate} */
      exchangeRateSet.currentRate) : null,
      topicSequenceNumber: receipt.topicSequenceNumber == null ? null : _long.default.fromValue(receipt.topicSequenceNumber),
      topicRunningHash: receipt.topicRunningHash != null ? receipt.topicRunningHash : null
    });
  }

}

exports.default = TransactionReceipt;