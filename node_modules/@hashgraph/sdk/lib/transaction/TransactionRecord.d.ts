/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransactionRecord} proto.ITransactionRecord
 * @typedef {import("@hashgraph/proto").ITransactionReceipt} proto.ITransactionReceipt
 * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
 * @typedef {import("@hashgraph/proto").ITransactionID} proto.ITransactionID
 */
/**
 * Response when the client sends the node TransactionGetRecordResponse.
 */
export default class TransactionRecord {
    /**
     * @internal
     * @param {proto.ITransactionRecord} record
     * @returns {TransactionRecord}
     */
    static _fromProtobuf(record: proto.ITransactionRecord): TransactionRecord;
    /**
     * @private
     * @param {object} props
     * @param {ContractFunctionResult} [props.contractFunctionResult]
     * @param {TransactionReceipt} props.receipt
     * @param {Uint8Array} props.transactionHash
     * @param {Timestamp} props.consensusTimestampstamp
     * @param {TransactionId} props.transactionId
     * @param {string} props.transactionMemo
     * @param {Hbar} props.transactionFee
     * @param {Transfer[]} props.transfers
     */
    private constructor();
    /**
     * The status (reach consensus, or failed, or is unknown) and the ID of
     * any new account/file/instance created.
     *
     * @readonly
     */
    readonly receipt: TransactionReceipt;
    /**
     * The hash of the Transaction that executed (not the hash of any Transaction that failed
     * for having a duplicate TransactionID).
     *
     * @readonly
     */
    readonly transactionHash: Uint8Array;
    /**
     * The consensus timestamp (or null if didn't reach consensus yet).
     *
     * @readonly
     */
    readonly consensusTimestampstamp: Timestamp;
    /**
     * The ID of the transaction this record represents.
     *
     * @readonly
     */
    readonly transactionId: TransactionId;
    /**
     * The memo that was submitted as part of the transaction (max 100 bytes).
     *
     * @readonly
     */
    readonly transactionMemo: string;
    /**
     * The actual transaction fee charged,
     * not the original transactionFee value from TransactionBody.
     *
     * @readonly
     */
    readonly transactionFee: Hbar;
    /**
     * All hbar transfers as a result of this transaction, such as fees, or transfers performed
     * by the transaction, or by a smart contract it calls, or by the creation of threshold
     * records that it triggers.
     *
     * @readonly
     */
    readonly transfers: Transfer[];
    /**
     * Record of the value returned by the smart contract function or constructor.
     *
     * @readonly
     */
    readonly contractFunctionResult: ContractFunctionResult | null;
}
import TransactionReceipt from "./TransactionReceipt.js";
import Timestamp from "../Timestamp.js";
import TransactionId from "./TransactionId.js";
import Hbar from "../Hbar.js";
import Transfer from "../Transfer.js";
import ContractFunctionResult from "../contract/ContractFunctionResult.js";
declare namespace proto {
    type ITransactionRecord = import("@hashgraph/proto/lib/proto").proto.ITransactionRecord;
    type ITransactionReceipt = import("@hashgraph/proto/lib/proto").proto.ITransactionReceipt;
    type ITimestamp = import("@hashgraph/proto/lib/proto").proto.ITimestamp;
    type ITransactionID = import("@hashgraph/proto/lib/proto").proto.ITransactionID;
}
export {};
