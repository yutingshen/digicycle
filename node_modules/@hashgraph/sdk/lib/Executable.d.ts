/**
 * @abstract
 * @internal
 * @template RequestT
 * @template ResponseT
 * @template OutputT
 */
export default class Executable<RequestT, ResponseT, OutputT> {
    /**
     * @abstract
     * @protected
     * @param {import("./client/Client.js").default<Channel, *>} client
     * @returns {Promise<void>}
     */
    protected _beforeExecute(client: import("./client/Client.js").default<Channel, any>): Promise<void>;
    /**
     * @abstract
     * @protected
     * @returns {RequestT}
     */
    protected _makeRequest(): RequestT;
    /**
     * @abstract
     * @internal
     * @param {ResponseT} response
     * @returns {Status}
     */
    _mapResponseStatus(response: ResponseT): Status;
    /**
     * @abstract
     * @protected
     * @param {ResponseT} response
     * @param {AccountId} nodeAccountId
     * @param {RequestT} request
     * @returns {Promise<OutputT>}
     */
    protected _mapResponse(response: ResponseT, nodeAccountId: AccountId, request: RequestT): Promise<OutputT>;
    /**
     * @abstract
     * @internal
     * @param {Channel} channel
     * @param {RequestT} request
     * @returns {Promise<ResponseT>}
     */
    _execute(channel: Channel, request: RequestT): Promise<ResponseT>;
    /**
     * @abstract
     * @protected
     * @template ChannelT
     * @template MirrorChannelT
     * @param {?import("./client/Client.js").default<ChannelT, MirrorChannelT>} client
     * @returns {AccountId}
     */
    protected _getNodeAccountId<ChannelT, MirrorChannelT>(client: import("./client/Client.js").default<ChannelT, MirrorChannelT> | null): AccountId;
    /**
     * @abstract
     * @protected
     * @returns {TransactionId}
     */
    protected _getTransactionId(): TransactionId;
    /**
     * @abstract
     * @protected
     * @returns {void}
     */
    protected _advanceRequest(): void;
    /**
     * @abstract
     * @protected
     * @param {Status} responseStatus
     * @param {ResponseT} response
     * @returns {boolean}
     */
    protected _shouldRetry(responseStatus: Status, response: ResponseT): boolean;
    /**
     * @abstract
     * @protected
     * @param {GrpcServiceError} error
     * @returns {boolean}
     */
    protected _shouldRetryExceptionally(error: GrpcServiceError): boolean;
    /**
     * @template {Channel} ChannelT
     * @template MirrorChannelT
     * @param {import("./client/Client.js").default<ChannelT, MirrorChannelT>} client
     * @returns {Promise<OutputT>}
     */
    execute<ChannelT_1 extends import("./channel/Channel.js").default, MirrorChannelT_1>(client: import("./client/Client.js").default<ChannelT_1, MirrorChannelT_1>): Promise<OutputT>;
}
export type AccountId = import("./account/AccountId.js").default;
export type Channel = import("./channel/Channel.js").default;
export type TransactionId = import("./transaction/TransactionId.js").default;
import Status from "./Status.js";
import GrpcServiceError from "./grpc/GrpcServiceError.js";
