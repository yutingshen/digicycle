"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _long = _interopRequireDefault(require("long"));

var _long2 = require("./long.cjs");

var _HbarUnit = _interopRequireDefault(require("./HbarUnit.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Hbar {
  /**
   * @param {number | string | Long | import("./long.js").LongObject | BigNumber} amount
   * @param {HbarUnit=} unit
   */
  constructor(amount, unit = _HbarUnit.default.Hbar) {
    if (unit === _HbarUnit.default.Tinybar) {
      this._valueInTinybar = (0, _long2.valueToLong)(amount);
    } else {
      let bigAmount = amount;

      if (bigAmount instanceof _long.default) {
        bigAmount = new _bignumber.default(bigAmount.toString(10));
      } else if (_bignumber.default.isBigNumber(bigAmount)) {
        bigAmount = new _bignumber.default(bigAmount);
      } else {
        bigAmount = new _bignumber.default(_long.default.fromValue(bigAmount).toString(10));
      }
      /**
       * @type {Long}
       */


      this._valueInTinybar = _long.default.fromString(bigAmount.multipliedBy(unit._tinybar).toFixed(0));
    }
  }
  /**
   * @param {number | Long | BigNumber} amount
   * @param {HbarUnit} unit
   * @returns {Hbar}
   */


  static from(amount, unit) {
    return new Hbar(amount, unit);
  }
  /**
   * @param {number | Long} amount
   * @returns {Hbar}
   */


  static fromTinybars(amount) {
    return new Hbar(amount, _HbarUnit.default.Tinybar);
  }
  /**
   * @param {string} str
   * @param {HbarUnit=} unit
   * @returns {Hbar}
   */


  static fromString(str, unit = _HbarUnit.default.Hbar) {
    return new Hbar(new _bignumber.default(str), unit);
  }
  /**
   * @param {HbarUnit} unit
   * @returns {BigNumber}
   */


  to(unit) {
    return new _bignumber.default(this._valueInTinybar.toString()).dividedBy(unit._tinybar);
  }
  /**
   * @returns {Long}
   */


  toTinybars() {
    return this._valueInTinybar;
  }
  /**
   * @returns {Hbar}
   */


  negated() {
    return Hbar.fromTinybars(this._valueInTinybar.negate());
  }
  /**
   * @override
   * @returns {string}
   */


  toString() {
    if (this._valueInTinybar.lessThan(10000) && this._valueInTinybar.greaterThan(-10000)) {
      return `${this._valueInTinybar.toString()} ${_HbarUnit.default.Tinybar._symbol}`;
    }

    return `${this.to(_HbarUnit.default.Hbar).toString()} ${_HbarUnit.default.Hbar._symbol}`;
  }

}

exports.default = Hbar;