/**
 * @param {string} text
 * @returns {[number, number, number]}
 */
export function fromString(text: string): [number, number, number];
/**
 * @typedef {object} IEntityId
 * @property {number | Long} num
 * @property {(number | Long)=} shard
 * @property {(number | Long)=} realm
 */
/**
 * @abstract
 * @template T
 */
export default class EntityId<T> {
    /**
     * @param {number | Long | IEntityId} properties
     * @param {(number | null | Long)=} realm
     * @param {(number | null | Long)=} num
     */
    constructor(properties: number | Long | IEntityId, realm?: (number | null | Long) | undefined, num?: (number | null | Long) | undefined);
    /**
     * @readonly
     * @type {Long}
     */
    readonly realm: Long;
    /**
     * @readonly
     * @type {Long}
     */
    readonly shard: Long;
    /**
     * @readonly
     * @type {Long}
     */
    readonly num: Long;
    /**
     * @abstract
     * @internal
     * @returns {T}
     */
    _toProtobuf(): T;
    /**
     * @returns {string}
     */
    toSolidityAddress(): string;
    /**
     * @override
     */
    toString(): string;
    /**
     * @param {this} other
     * @returns {boolean}
     */
    equals(other: EntityId<T>): boolean;
}
export type IEntityId = {
    num: number | Long;
    shard?: (number | Long) | undefined;
    realm?: (number | Long) | undefined;
};
import Long from "long";
