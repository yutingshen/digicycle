/**
 * Flowtype definitions for ContractInfo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IContractID">} IContractID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IDuration">} IDuration
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IContractInfo">} IContractInfo
 */
/**
 * @typedef {$PropertyType<$Exports<"@hashgraph/cryptography">, "Key">} Key
 */
/**
 * Response when the client sends the node CryptoGetInfoQuery.
 */
declare export default class ContractInfo {
  /**
   * @internal
   * @param {proto$IContractInfo} info
   * @returns {ContractInfo}
   */
  static _fromProtobuf(info: proto$IContractInfo): ContractInfo;

  /**
   * @private
   * @param {object} properties
   * @param {ContractId} properties.contractId
   * @param {AccountId} properties.accountId
   * @param {string} properties.contractAccountId
   * @param {?Key} properties.adminKey
   * @param {Timestamp} properties.expirationTime
   * @param {Long} properties.autoRenewPeriod
   * @param {Long} properties.storage
   * @param {string} properties.contractMemo
   * @param {Hbar} properties.balance
   */
  constructor(): this;

  /**
   * ID of the contract instance, in the format used in transactions.
   * @readonly
   */
  +contractId: ContractId;

  /**
   * ID of the cryptocurrency account owned by the contract instance,
   * in the format used in transactions.
   * @readonly
   */
  +accountId: AccountId;

  /**
   * ID of both the contract instance and the cryptocurrency account owned by the contract
   * instance, in the format used by Solidity.
   * @readonly
   */
  +contractAccountId: string;

  /**
   * The state of the instance and its fields can be modified arbitrarily if this key signs a
   * transaction to modify it. If this is null, then such modifications are not possible,
   * and there is no administrator that can override the normal operation of this smart
   * contract instance. Note that if it is created with no admin keys, then there is no
   * administrator to authorize changing the admin keys, so there can never be any admin keys
   * for that instance.
   * @readonly
   */
  +adminKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key"> | null;

  /**
   * The current time at which this contract instance (and its account) is set to expire.
   * @readonly
   */
  +expirationTime: Timestamp;

  /**
   * The expiration time will extend every this many seconds. If there are insufficient funds,
   * then it extends as long as possible. If the account is empty when it expires,
   * then it is deleted.
   * @readonly
   */
  +autoRenewPeriod: Long.Long;

  /**
   * Number of bytes of storage being used by this instance (which affects the cost to
   * extend the expiration time).
   * @readonly
   */
  +storage: Long.Long;

  /**
   * The memo associated with the contract (max 100 bytes).
   * @readonly
   */
  +contractMemo: string;

  /**
   * The current balance of the contract.
   * @readonly
   */
  +balance: Hbar;

  /**
   * @internal
   * @returns {proto$IContractInfo}
   */
  _toProtobuf(): proto$IContractInfo;
}
export type Key = $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;
import ContractId from "./ContractId.js";
import AccountId from "../account/AccountId.js";
import Timestamp from "../Timestamp.js";
import Long from "long";
import Hbar from "../Hbar.js";
declare type proto$IContractID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IDuration = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IContractInfo = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
