"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TransactionId = _interopRequireDefault(require("../transaction/TransactionId.cjs"));

var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));

var _Executable = _interopRequireDefault(require("../Executable.cjs"));

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _Query = require("./Query.cjs");

var _proto = require("@hashgraph/proto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IQuery} proto.IQuery
 * @typedef {import("@hashgraph/proto").IResponse} proto.IResponse
 * @typedef {import("@hashgraph/proto").IQueryHeader} proto.IQueryHeader
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../Status.js").default} Status
 */

/**
 * @template OutputT
 * @augments {Executable<proto.IQuery, proto.IResponse, Hbar>}
 */
class CostQuery extends _Executable.default {
  /**
   * @param {import("./Query.js").default<OutputT>} query
   */
  constructor(query) {
    super();
    this._query = query;
    /**
     * @type {proto.IQueryHeader | null}
     */

    this._header = null;
    this._nextIndex = 0;
  }
  /**
   * @returns {TransactionId}
   */


  _getTransactionId() {
    return this._query._getTransactionId();
  }
  /**
   * @abstract
   * @protected
   * @param {import("../client/Client.js").default<*, *>} client
   * @returns {Promise<void>}
   */


  async _beforeExecute(client) {
    if (client == null) {
      throw new Error("Cannot do CostQuery without Client");
    }

    const operator = client._operator;

    if (operator == null) {
      throw new Error("`client` must have an `operator` or an explicit payment transaction must be provided");
    }

    this._header = {
      payment: await (0, _Query._makePaymentTransaction)(
      /** @type {import("../transaction/TransactionId.js").default} */
      _TransactionId.default.generate(new _AccountId.default(0)), new _AccountId.default(0), operator, new _Hbar.default(0)),
      responseType: _proto.ResponseType.COST_ANSWER
    };
  }
  /**
   * @abstract
   * @internal
   * @returns {proto.IQuery}
   */


  _makeRequest() {
    return this._query._onMakeRequest(
    /** @type {proto.IQueryHeader} */
    this._header);
  }
  /**
   * @abstract
   * @internal
   * @param {proto.IResponse} status
   * @returns {Status}
   */


  _mapResponseStatus(status) {
    return this._query._mapResponseStatus(status);
  }
  /**
   * @override
   * @internal
   * @param {proto.IResponse} response
   * @param {AccountId} nodeAccountId
   * @param {proto.IQuery} request
   * @returns {Promise<Hbar>}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  _mapResponse(response, nodeAccountId, request) {
    const cost = this._query._mapResponseHeader(response).cost;

    return Promise.resolve(_Hbar.default.fromTinybars(
    /** @type {Long | number} */
    cost));
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.IQuery} request
   * @returns {Promise<proto.IResponse>}
   */


  _execute(channel, request) {
    return this._query._execute(channel, request);
  }
  /**
   * @override
   * @param {import("../client/Client.js").default<*, *>} client
   * @returns {AccountId}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  _getNodeAccountId(client) {
    return this._query._paymentTransactionNodeIds[this._nextIndex];
  }
  /**
   * @abstract
   * @protected
   * @returns {void}
   */


  _advanceRequest() {
    this._nextIndex = (this._nextIndex + 1) % this._query._paymentTransactionNodeIds.length;
  }

}

exports.default = CostQuery;

_Query.COST_QUERY.push(query => new CostQuery(query));