/**
 * Flowtype definitions for ConsensusMessageSubmitTransaction
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { TransactionBuilder } from "../TransactionBuilder";
import { Transaction as ProtoTransaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
declare var UnaryMethodDefinition: typeof grpc.UnaryMethodDefinition;
import { ConsensusTopicIdLike } from "./ConsensusTopicId";
import { TransactionId } from "../TransactionId";
import { BaseClient } from "../BaseClient";
import { Transaction } from "../Transaction";
import { Hbar } from "../Hbar";
export interface ChunkInfo {
  id: TransactionId;
  number: number;
  total: number;
}
declare export class ConsensusMessageSubmitTransaction
  mixins TransactionBuilder<Transaction[]> {
  constructor(): this;
  setTopicId(id: ConsensusTopicIdLike): this;
  setMessage(message: Uint8Array | string): this;
  setMaxChunks(maxChunks: number): this;
  setChunkInfo(initialId: TransactionId, total: number, num: number): this;
  build(client: BaseClient): Transaction[];
  getCost(): Promise<Hbar>;
  execute(client: BaseClient): Promise<TransactionId>;
  executeAll(client: BaseClient): Promise<TransactionId[]>;
  _method: UnaryMethodDefinition<ProtoTransaction, TransactionResponse>;
  _doValidate(_: string[]): void;
}
