/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IFileInfo} proto.IFileInfo
 * @typedef {import("@hashgraph/proto").IFileID} proto.IFileID
 * @typedef {import("@hashgraph/proto").ITimestamp} proto.ITimestamp
 */
/**
 * Response when the client sends the node CryptoGetInfoQuery.
 */
export default class FileInfo {
    /**
     * @internal
     * @param {proto.IFileInfo} info
     * @returns {FileInfo}
     */
    static _fromProtobuf(info: proto.IFileInfo): FileInfo;
    /**
     * @private
     * @param {object} props
     * @param {FileId} props.fileId
     * @param {Long} props.size
     * @param {Timestamp} props.expirationTime
     * @param {boolean} props.deleted
     * @param {KeyList} props.keys
     */
    private constructor();
    /**
     * The ID of the file for which information is requested.
     *
     * @readonly
     */
    readonly fileId: FileId;
    /**
     * Number of bytes in contents.
     *
     * @readonly
     */
    readonly size: Long.Long;
    /**
     * The current time at which this account is set to expire.
     *
     * @readonly
     */
    readonly expirationTime: Timestamp;
    /**
     * True if deleted but not yet expired.
     *
     * @readonly
     */
    readonly deleted: boolean;
    /**
     * One of these keys must sign in order to delete the file.
     * All of these keys must sign in order to update the file.
     *
     * @readonly
     */
    readonly keys: KeyList;
    /**
     * @internal
     * @returns {proto.IFileInfo}
     */
    _toProtobuf(): proto.IFileInfo;
}
import FileId from "./FileId.js";
import Long from "long";
import Timestamp from "../Timestamp.js";
import { KeyList } from "@hashgraph/cryptography";
declare namespace proto {
    type IFileInfo = import("@hashgraph/proto/lib/proto").proto.FileGetInfoResponse.IFileInfo;
    type IFileID = import("@hashgraph/proto/lib/proto").proto.IFileID;
    type ITimestamp = import("@hashgraph/proto/lib/proto").proto.ITimestamp;
}
export {};
