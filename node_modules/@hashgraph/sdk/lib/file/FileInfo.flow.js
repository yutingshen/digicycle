/**
 * Flowtype definitions for FileInfo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IFileInfo">} IFileInfo
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IFileID">} IFileID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 */
/**
 * Response when the client sends the node CryptoGetInfoQuery.
 */
declare export default class FileInfo {
  /**
   * @internal
   * @param {proto$IFileInfo} info
   * @returns {FileInfo}
   */
  static _fromProtobuf(info: proto$IFileInfo): FileInfo;

  /**
   * @private
   * @param {object} props
   * @param {FileId} props.fileId
   * @param {Long} props.size
   * @param {Timestamp} props.expirationTime
   * @param {boolean} props.deleted
   * @param {KeyList} props.keys
   */
  constructor(): this;

  /**
   * The ID of the file for which information is requested.
   * @readonly
   */
  +fileId: FileId;

  /**
   * Number of bytes in contents.
   * @readonly
   */
  +size: Long.Long;

  /**
   * The current time at which this account is set to expire.
   * @readonly
   */
  +expirationTime: Timestamp;

  /**
   * True if deleted but not yet expired.
   * @readonly
   */
  +deleted: boolean;

  /**
   * One of these keys must sign in order to delete the file.
   * All of these keys must sign in order to update the file.
   * @readonly
   */
  +keys: KeyList;

  /**
   * @internal
   * @returns {proto$IFileInfo}
   */
  _toProtobuf(): proto$IFileInfo;
}
import FileId from "./FileId.js";
import Long from "long";
import Timestamp from "../Timestamp.js";
import { KeyList } from "@hashgraph/cryptography";
declare type proto$IFileInfo = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IFileID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
