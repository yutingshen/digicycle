/**
 * Flowtype definitions for CryptoGetLiveHash_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
import * as CryptoAddLiveHash_pb from "./CryptoAddLiveHash_pb";
declare export class CryptoGetLiveHashQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetLiveHashQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetLiveHashQuery
  ): CryptoGetLiveHashQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetLiveHashQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetLiveHashQuery;
  static deserializeBinaryFromReader(
    message: CryptoGetLiveHashQuery,
    reader: jspb.BinaryReader
  ): CryptoGetLiveHashQuery;
}
export type CryptoGetLiveHashQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  accountid?: BasicTypes_pb.AccountID.AsObject,
  hash: Uint8Array | string,
  ...
};
declare export class CryptoGetLiveHashResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasLivehash(): boolean;
  clearLivehash(): void;
  getLivehash(): CryptoAddLiveHash_pb.LiveHash | void;
  setLivehash(value?: CryptoAddLiveHash_pb.LiveHash): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetLiveHashResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetLiveHashResponse
  ): CryptoGetLiveHashResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetLiveHashResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetLiveHashResponse;
  static deserializeBinaryFromReader(
    message: CryptoGetLiveHashResponse,
    reader: jspb.BinaryReader
  ): CryptoGetLiveHashResponse;
}
export type CryptoGetLiveHashResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  livehash?: CryptoAddLiveHash_pb.LiveHash.AsObject,
  ...
};
