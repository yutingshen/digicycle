/**
 * Flowtype definitions for TokenGetInfo_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
declare export class TokenGetInfoQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasToken(): boolean;
  clearToken(): void;
  getToken(): BasicTypes_pb.TokenID | void;
  setToken(value?: BasicTypes_pb.TokenID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenGetInfoQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TokenGetInfoQuery
  ): TokenGetInfoQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TokenGetInfoQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TokenGetInfoQuery;
  static deserializeBinaryFromReader(
    message: TokenGetInfoQuery,
    reader: jspb.BinaryReader
  ): TokenGetInfoQuery;
}
export type TokenGetInfoQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  token?: BasicTypes_pb.TokenID.AsObject,
  ...
};
declare export class TokenInfo mixins jspb.Message {
  hasTokenid(): boolean;
  clearTokenid(): void;
  getTokenid(): BasicTypes_pb.TokenID | void;
  setTokenid(value?: BasicTypes_pb.TokenID): void;
  getName(): string;
  setName(value: string): void;
  getSymbol(): string;
  setSymbol(value: string): void;
  getDecimals(): number;
  setDecimals(value: number): void;
  getTotalsupply(): number;
  setTotalsupply(value: number): void;
  hasTreasury(): boolean;
  clearTreasury(): void;
  getTreasury(): BasicTypes_pb.AccountID | void;
  setTreasury(value?: BasicTypes_pb.AccountID): void;
  hasAdminkey(): boolean;
  clearAdminkey(): void;
  getAdminkey(): BasicTypes_pb.Key | void;
  setAdminkey(value?: BasicTypes_pb.Key): void;
  hasKyckey(): boolean;
  clearKyckey(): void;
  getKyckey(): BasicTypes_pb.Key | void;
  setKyckey(value?: BasicTypes_pb.Key): void;
  hasFreezekey(): boolean;
  clearFreezekey(): void;
  getFreezekey(): BasicTypes_pb.Key | void;
  setFreezekey(value?: BasicTypes_pb.Key): void;
  hasWipekey(): boolean;
  clearWipekey(): void;
  getWipekey(): BasicTypes_pb.Key | void;
  setWipekey(value?: BasicTypes_pb.Key): void;
  hasSupplykey(): boolean;
  clearSupplykey(): void;
  getSupplykey(): BasicTypes_pb.Key | void;
  setSupplykey(value?: BasicTypes_pb.Key): void;
  getDefaultfreezestatus(): $ElementType<
    BasicTypes_pb.TokenFreezeStatusMap,
    $Keys<BasicTypes_pb.TokenFreezeStatusMap>
  >;
  setDefaultfreezestatus(
    value: $ElementType<
      BasicTypes_pb.TokenFreezeStatusMap,
      $Keys<BasicTypes_pb.TokenFreezeStatusMap>
    >
  ): void;
  getDefaultkycstatus(): $ElementType<
    BasicTypes_pb.TokenKycStatusMap,
    $Keys<BasicTypes_pb.TokenKycStatusMap>
  >;
  setDefaultkycstatus(
    value: $ElementType<
      BasicTypes_pb.TokenKycStatusMap,
      $Keys<BasicTypes_pb.TokenKycStatusMap>
    >
  ): void;
  getIsdeleted(): boolean;
  setIsdeleted(value: boolean): void;
  hasAutorenewaccount(): boolean;
  clearAutorenewaccount(): void;
  getAutorenewaccount(): BasicTypes_pb.AccountID | void;
  setAutorenewaccount(value?: BasicTypes_pb.AccountID): void;
  getAutorenewperiod(): number;
  setAutorenewperiod(value: number): void;
  getExpiry(): number;
  setExpiry(value: number): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenInfo$AsObject;
  static toObject(includeInstance: boolean, msg: TokenInfo): TokenInfo$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TokenInfo,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TokenInfo;
  static deserializeBinaryFromReader(
    message: TokenInfo,
    reader: jspb.BinaryReader
  ): TokenInfo;
}
export type TokenInfo$AsObject = {
  tokenid?: BasicTypes_pb.TokenID.AsObject,
  name: string,
  symbol: string,
  decimals: number,
  totalsupply: number,
  treasury?: BasicTypes_pb.AccountID.AsObject,
  adminkey?: BasicTypes_pb.Key.AsObject,
  kyckey?: BasicTypes_pb.Key.AsObject,
  freezekey?: BasicTypes_pb.Key.AsObject,
  wipekey?: BasicTypes_pb.Key.AsObject,
  supplykey?: BasicTypes_pb.Key.AsObject,
  defaultfreezestatus: $ElementType<
    BasicTypes_pb.TokenFreezeStatusMap,
    $Keys<BasicTypes_pb.TokenFreezeStatusMap>
  >,
  defaultkycstatus: $ElementType<
    BasicTypes_pb.TokenKycStatusMap,
    $Keys<BasicTypes_pb.TokenKycStatusMap>
  >,
  isdeleted: boolean,
  autorenewaccount?: BasicTypes_pb.AccountID.AsObject,
  autorenewperiod: number,
  expiry: number,
  ...
};
declare export class TokenGetInfoResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasTokeninfo(): boolean;
  clearTokeninfo(): void;
  getTokeninfo(): TokenInfo | void;
  setTokeninfo(value?: TokenInfo): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenGetInfoResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TokenGetInfoResponse
  ): TokenGetInfoResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TokenGetInfoResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TokenGetInfoResponse;
  static deserializeBinaryFromReader(
    message: TokenGetInfoResponse,
    reader: jspb.BinaryReader
  ): TokenGetInfoResponse;
}
export type TokenGetInfoResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  tokeninfo?: TokenInfo$AsObject,
  ...
};
