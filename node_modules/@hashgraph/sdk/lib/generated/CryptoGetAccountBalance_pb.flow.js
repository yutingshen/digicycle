/**
 * Flowtype definitions for CryptoGetAccountBalance_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
declare export class CryptoGetAccountBalanceQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  hasContractid(): boolean;
  clearContractid(): void;
  getContractid(): BasicTypes_pb.ContractID | void;
  setContractid(value?: BasicTypes_pb.ContractID): void;
  getBalancesourceCase(): $Values<
    typeof CryptoGetAccountBalanceQuery$BalancesourceCase
  >;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetAccountBalanceQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetAccountBalanceQuery
  ): CryptoGetAccountBalanceQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetAccountBalanceQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetAccountBalanceQuery;
  static deserializeBinaryFromReader(
    message: CryptoGetAccountBalanceQuery,
    reader: jspb.BinaryReader
  ): CryptoGetAccountBalanceQuery;
}
declare var CryptoGetAccountBalanceQuery: typeof npm$namespace$CryptoGetAccountBalanceQuery;

declare var npm$namespace$CryptoGetAccountBalanceQuery: {|
  BalancesourceCase: typeof CryptoGetAccountBalanceQuery$BalancesourceCase,
|};
export type CryptoGetAccountBalanceQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  accountid?: BasicTypes_pb.AccountID.AsObject,
  contractid?: BasicTypes_pb.ContractID.AsObject,
  ...
};

declare export var CryptoGetAccountBalanceQuery$BalancesourceCase: {|
  +BALANCESOURCE_NOT_SET: 0, // 0
  +ACCOUNTID: 2, // 2
  +CONTRACTID: 3, // 3
|};
declare export class TokenBalance mixins jspb.Message {
  hasTokenid(): boolean;
  clearTokenid(): void;
  getTokenid(): BasicTypes_pb.TokenID | void;
  setTokenid(value?: BasicTypes_pb.TokenID): void;
  getBalance(): string;
  setBalance(value: string): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenBalance$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TokenBalance
  ): TokenBalance$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TokenBalance,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TokenBalance;
  static deserializeBinaryFromReader(
    message: TokenBalance,
    reader: jspb.BinaryReader
  ): TokenBalance;
}
export type TokenBalance$AsObject = {
  tokenid?: BasicTypes_pb.TokenID.AsObject,
  balance: string,
  ...
};
declare export class TokenBalances mixins jspb.Message {
  clearTokenbalancesList(): void;
  getTokenbalancesList(): Array<TokenBalance>;
  setTokenbalancesList(value: Array<TokenBalance>): void;
  addTokenbalances(value?: TokenBalance, index?: number): TokenBalance;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TokenBalances$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TokenBalances
  ): TokenBalances$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TokenBalances,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TokenBalances;
  static deserializeBinaryFromReader(
    message: TokenBalances,
    reader: jspb.BinaryReader
  ): TokenBalances;
}
export type TokenBalances$AsObject = {
  tokenbalancesList: Array<TokenBalance$AsObject>,
  ...
};
declare export class CryptoGetAccountBalanceResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  getBalance(): number;
  setBalance(value: number): void;
  clearTokenbalancesList(): void;
  getTokenbalancesList(): Array<TokenBalance>;
  setTokenbalancesList(value: Array<TokenBalance>): void;
  addTokenbalances(value?: TokenBalance, index?: number): TokenBalance;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetAccountBalanceResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetAccountBalanceResponse
  ): CryptoGetAccountBalanceResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetAccountBalanceResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetAccountBalanceResponse;
  static deserializeBinaryFromReader(
    message: CryptoGetAccountBalanceResponse,
    reader: jspb.BinaryReader
  ): CryptoGetAccountBalanceResponse;
}
export type CryptoGetAccountBalanceResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  accountid?: BasicTypes_pb.AccountID.AsObject,
  balance: number,
  tokenbalancesList: Array<TokenBalance$AsObject>,
  ...
};
