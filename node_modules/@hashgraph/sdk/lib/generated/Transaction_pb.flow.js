/**
 * Flowtype definitions for Transaction_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as Duration_pb from "./Duration_pb";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as TransactionBody_pb from "./TransactionBody_pb";
declare export class Transaction mixins jspb.Message {
  getSignedtransactionbytes(): Uint8Array | string;
  getSignedtransactionbytes_asU8(): Uint8Array;
  getSignedtransactionbytes_asB64(): string;
  setSignedtransactionbytes(value: Uint8Array | string): void;
  getBodybytes(): Uint8Array | string;
  getBodybytes_asU8(): Uint8Array;
  getBodybytes_asB64(): string;
  setBodybytes(value: Uint8Array | string): void;
  hasSigmap(): boolean;
  clearSigmap(): void;
  getSigmap(): BasicTypes_pb.SignatureMap | void;
  setSigmap(value?: BasicTypes_pb.SignatureMap): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Transaction$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Transaction
  ): Transaction$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: Transaction,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Transaction;
  static deserializeBinaryFromReader(
    message: Transaction,
    reader: jspb.BinaryReader
  ): Transaction;
}
export type Transaction$AsObject = {
  signedtransactionbytes: Uint8Array | string,
  bodybytes: Uint8Array | string,
  sigmap?: BasicTypes_pb.SignatureMap.AsObject,
  ...
};
