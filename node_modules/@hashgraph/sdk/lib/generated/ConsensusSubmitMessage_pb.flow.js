/**
 * Flowtype definitions for ConsensusSubmitMessage_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
declare export class ConsensusMessageChunkInfo mixins jspb.Message {
  hasInitialtransactionid(): boolean;
  clearInitialtransactionid(): void;
  getInitialtransactionid(): BasicTypes_pb.TransactionID | void;
  setInitialtransactionid(value?: BasicTypes_pb.TransactionID): void;
  getTotal(): number;
  setTotal(value: number): void;
  getNumber(): number;
  setNumber(value: number): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusMessageChunkInfo$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ConsensusMessageChunkInfo
  ): ConsensusMessageChunkInfo$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ConsensusMessageChunkInfo,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusMessageChunkInfo;
  static deserializeBinaryFromReader(
    message: ConsensusMessageChunkInfo,
    reader: jspb.BinaryReader
  ): ConsensusMessageChunkInfo;
}
export type ConsensusMessageChunkInfo$AsObject = {
  initialtransactionid?: BasicTypes_pb.TransactionID.AsObject,
  total: number,
  number: number,
  ...
};
declare export class ConsensusSubmitMessageTransactionBody mixins jspb.Message {
  hasTopicid(): boolean;
  clearTopicid(): void;
  getTopicid(): BasicTypes_pb.TopicID | void;
  setTopicid(value?: BasicTypes_pb.TopicID): void;
  getMessage(): Uint8Array | string;
  getMessage_asU8(): Uint8Array;
  getMessage_asB64(): string;
  setMessage(value: Uint8Array | string): void;
  hasChunkinfo(): boolean;
  clearChunkinfo(): void;
  getChunkinfo(): ConsensusMessageChunkInfo | void;
  setChunkinfo(value?: ConsensusMessageChunkInfo): void;
  serializeBinary(): Uint8Array;
  toObject(
    includeInstance?: boolean
  ): ConsensusSubmitMessageTransactionBody$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ConsensusSubmitMessageTransactionBody
  ): ConsensusSubmitMessageTransactionBody$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ConsensusSubmitMessageTransactionBody,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(
    bytes: Uint8Array
  ): ConsensusSubmitMessageTransactionBody;
  static deserializeBinaryFromReader(
    message: ConsensusSubmitMessageTransactionBody,
    reader: jspb.BinaryReader
  ): ConsensusSubmitMessageTransactionBody;
}
export type ConsensusSubmitMessageTransactionBody$AsObject = {
  topicid?: BasicTypes_pb.TopicID.AsObject,
  message: Uint8Array | string,
  chunkinfo?: ConsensusMessageChunkInfo$AsObject,
  ...
};
