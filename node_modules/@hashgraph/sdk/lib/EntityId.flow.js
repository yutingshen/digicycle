/**
 * Flowtype definitions for EntityId
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @param {string} text
 * @returns {[number, number, number]}
 */
declare export function fromString(text: string): [number, number, number];

/**
 * @typedef IEntityId
 */
/**
 * @abstract
 * @template
 */
declare export default class EntityId<T> {
  /**
   * @param {number | Long | IEntityId} properties
   * @param {(number | null | Long)=} realm
   * @param {(number | null | Long)=} num
   */
  constructor(
    properties: number | Long | IEntityId,
    realm?: (number | null | Long) | void,
    num?: (number | null | Long) | void
  ): this;

  /**
   * @readonly
   * @type {Long}
   */
  +realm: Long;

  /**
   * @readonly
   * @type {Long}
   */
  +shard: Long;

  /**
   * @readonly
   * @type {Long}
   */
  +num: Long;

  /**
   * @abstract
   * @internal
   * @returns {T}
   */
  _toProtobuf(): T;

  /**
   * @returns {string}
   */
  toSolidityAddress(): string;

  /**
   * @override
   */
  toString(): string;

  /**
   * @param {this} other
   * @returns {boolean}
   */
  equals(other: EntityId<T>): boolean;
}
export type IEntityId = {
  num: number | Long,
  shard?: (number | Long) | void,
  realm?: (number | Long) | void,
  ...
};
import Long from "long";
