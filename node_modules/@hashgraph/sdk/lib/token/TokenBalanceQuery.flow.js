/**
 * Flowtype definitions for TokenBalanceQuery
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { QueryBuilder } from "../QueryBuilder";
import { grpc } from "@improbable-eng/grpc-web";
import { Query } from "../generated/Query_pb";
import { Response } from "../generated/Response_pb";
import { QueryHeader } from "../generated/QueryHeader_pb";
import { AccountIdLike } from "../account/AccountId";
import { TokenBalance as ProtoTokenBalance } from "../generated/CryptoGetAccountBalance_pb";
import { ResponseHeader } from "../generated/ResponseHeader_pb";
import { TokenId, TokenIdLike } from "./TokenId";
import BigNumber from "bignumber.js";
declare export class TokenBalanceMap {
  constructor(balances: ProtoTokenBalance[]): this;
  get(tokenId: TokenIdLike): BigNumber | void;
  values(): IterableIterator<BigNumber>;
  keys(): IterableIterator<TokenId>;
  @@iterator: () => IterableIterator<[TokenId, BigNumber]>;
  toString(): string;
}
/**
 * Get the balance of a cryptocurrency token. This returns only the balance, so it is a smaller
 * and faster reply than CryptoGetInfo, which returns the balance plus additional information.
 */
declare export class TokenBalanceQuery mixins QueryBuilder<TokenBalanceMap> {
  constructor(): this;

  /**
   * The account ID for which information is requested.
   */
  setAccountId(id: AccountIdLike): this;
  _doLocalValidate(_: string[]): void;
  _getMethod(): grpc.UnaryMethodDefinition<Query, Response>;
  _getHeader(): QueryHeader;
  _mapResponseHeader(response: Response): ResponseHeader;
  _mapResponse(response: Response): TokenBalanceMap;
  _isPaymentRequired(): boolean;
}
