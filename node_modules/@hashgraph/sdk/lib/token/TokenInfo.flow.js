/**
 * Flowtype definitions for TokenInfo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "TokenFreezeStatus">} TokenFreezeStatus
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "TokenKycStatus">} TokenKycStatus
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITokenInfo">} ITokenInfo
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITokenID">} ITokenID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IKey">} IKey
 */
/**
 * @typedef {$PropertyType<$Exports<"@hashgraph/cryptography">, "Key">} Key
 */
/**
 * Response when the client sends the node TokenGetInfoQuery.
 */
declare export default class TokenInfo {
  /**
   * @internal
   * @param {proto$ITokenInfo} info
   * @returns {TokenInfo}
   */
  static _fromProtobuf(info: proto$ITokenInfo): TokenInfo;

  /**
   * @private
   * @param {object} props
   * @param {TokenId} props.tokenId ;
   * @param {string} props.name ;
   * @param {string} props.symbol ;
   * @param {number} props.decimals ;
   * @param {Long} props.totalSupply ;
   * @param {AccountId} props.treasury ;
   * @param {Key} props.adminKey ;
   * @param {Key} props.kycKey ;
   * @param {Key} props.freezeKey ;
   * @param {Key} props.wipeKey ;
   * @param {Key} props.supplyKey ;
   * @param {boolean | null} props.defaultFreezeStatus ;
   * @param {boolean | null} props.defaultKycStatus ;
   * @param {boolean} props.isDeleted ;
   * @param {AccountId | null} props.autoRenewAccount ;
   * @param {Long} props.autoRenewPeriod ;
   * @param {Long} props.expirationTime ;
   */
  constructor(): this;

  /**
   * ID of the token instance
   * @readonly
   */
  +tokenId: TokenId;

  /**
   * The name of the token. It is a string of ASCII only characters
   * @readonly
   */
  +name: string;

  /**
   * The symbol of the token. It is a UTF-8 capitalized alphabetical string
   * @readonly
   */
  +symbol: string;

  /**
   * The number of decimal places a token is divisible by
   * @readonly
   */
  +decimals: number;

  /**
   * The total supply of tokens that are currently in circulation
   * @readonly
   */
  +totalSupply: Long.Long;

  /**
   * The ID of the account which is set as Treasury
   * @readonly
   */
  +treasury: AccountId;

  /**
   * The key which can perform update/delete operations on the token. If empty, the token can be perceived as
   * immutable (not being able to be updated/deleted)
   * @readonly
   */
  +adminKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,
   * and KYC grant or revoke operations are not possible.
   * @readonly
   */
  +kycKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible
   * @readonly
   */
  +freezeKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The key which can wipe token balance of an account. If empty, wipe is not possible
   * @readonly
   */
  +wipeKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations
   * @readonly
   */
  +supplyKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.
   * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and
   * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false
   *       FreezeNotApplicable = null;
   *       Frozen = true;
   *       Unfrozen = false;
   * @readonly
   */
  +defaultFreezeStatus: boolean | null;

  /**
   * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable
   * is returned if KYC key is not set, otherwise Revoked
   *       KycNotApplicable = null;
   *       Granted = true;
   *       Revoked = false;
   * @readonly
   */
  +defaultKycStatus: boolean | null;

  /**
   * Specifies whether the token was deleted or not
   * @readonly
   */
  +isDeleted: boolean;

  /**
   * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval
   * @readonly
   */
  +autoRenewAccount: AccountId | null;

  /**
   * The interval at which the auto-renew account will be charged to extend the token's expiry
   * @readonly
   */
  +autoRenewPeriod: Long.Long;

  /**
   * The epoch second at which the token expire: will; if an auto-renew account and period are specified,
   * this is coerced to the current epoch second plus the autoRenewPeriod
   * @readonly
   */
  +expirationTime: Long.Long;

  /**
   * @returns {proto$ITokenInfo}
   */
  _toProtobuf(): proto$ITokenInfo;
}
export type Key = $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;
import TokenId from "./TokenId.js";
import Long from "long";
import AccountId from "../account/AccountId.js";
declare type proto$TokenFreezeStatus = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$TokenKycStatus = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITokenInfo = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITokenID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IKey = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
