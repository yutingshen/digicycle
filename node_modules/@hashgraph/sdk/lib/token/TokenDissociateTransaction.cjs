"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TokenId = _interopRequireDefault(require("./TokenId.cjs"));

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ITokenDissociateTransactionBody} proto.ITokenDissociateTransactionBody
 * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 */

/**
 * Dissociate a new Hederaâ„¢ crypto-currency token.
 */
class TokenDissociateTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {(TokenId | string)[]} [props.tokenIds]
   * @param {AccountId | string} [props.accountId]
   * @param {Long | number} [props.amount]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {?TokenId[]}
     */

    this._tokenIds = null;
    /**
     * @private
     * @type {?AccountId}
     */

    this._accountId = null;

    if (props.tokenIds != null) {
      this.setTokenIds(...props.tokenIds);
    }

    if (props.accountId != null) {
      this.setAccountId(props.accountId);
    }
  }
  /**
   * @internal
   * @param {proto.ITransactionBody} body
   * @returns {TokenDissociateTransaction}
   */


  static _fromProtobuf(body) {
    const dissociateToken =
    /** @type {proto.ITokenDissociateTransactionBody} */
    body.tokenDissociate;
    return new TokenDissociateTransaction({
      tokenIds: dissociateToken.tokens != null ? dissociateToken.tokens.map(token => _TokenId.default._fromProtobuf(token)) : undefined,
      accountId: dissociateToken.account != null ? _AccountId.default._fromProtobuf(dissociateToken.account) : undefined
    });
  }
  /**
   * @returns {?TokenId[]}
   */


  get tokenIds() {
    return this._tokenIds;
  }
  /**
   * @param {(TokenId | string)[]} tokenIds
   * @returns {this}
   */


  setTokenIds(...tokenIds) {
    this._requireNotFrozen();

    this._tokenIds = tokenIds.map(tokenId => tokenId instanceof _TokenId.default ? tokenId : _TokenId.default.fromString(tokenId));
    return this;
  }
  /**
   * @returns {?AccountId}
   */


  get accountId() {
    return this._accountId;
  }
  /**
   * @param {AccountId | string} accountId
   * @returns {this}
   */


  setAccountId(accountId) {
    this._requireNotFrozen();

    this._accountId = accountId instanceof _AccountId.default ? accountId : _AccountId.default.fromString(accountId);
    return this;
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.ITransaction} request
   * @returns {Promise<proto.ITransactionResponse>}
   */


  _execute(channel, request) {
    return channel.token.dissociateTokens(request);
  }
  /**
   * @override
   * @protected
   * @returns {NonNullable<proto.TransactionBody["data"]>}
   */


  _getTransactionDataCase() {
    return "tokenDissociate";
  }
  /**
   * @override
   * @protected
   * @returns {proto.ITokenDissociateTransactionBody}
   */


  _makeTransactionData() {
    return {
      tokens: this._tokenIds != null ? this._tokenIds.map(tokenId => tokenId._toProtobuf()) : null,
      account: this._accountId != null ? this._accountId._toProtobuf() : null
    };
  }

}

exports.default = TokenDissociateTransaction;

_Transaction.TRANSACTION_REGISTRY.set("tokenDissociate", // eslint-disable-next-line @typescript-eslint/unbound-method
TokenDissociateTransaction._fromProtobuf);