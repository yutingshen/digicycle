import { SingleTransactionBuilder } from "../TransactionBuilder";
import { Transaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
import { TokenIdLike } from "./TokenId";
import { AccountIdLike } from "../account/AccountId";
import UnaryMethodDefinition = grpc.UnaryMethodDefinition;
/**
 * Associates the provided account with the provided tokens. Must be signed by the provided Account's key.
 * If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 * If the provided account has been associated, the transaction will resolve to ACCOUNT_ASSOCIATED.
 * If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.
 * If any of the provided tokens has been associated, the transaction will resolve to TOKEN_WAS_ASSOCIATED.
 * If an association between the provided account and any of the tokens already exists, the transaction will resolve to
 * TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.
 * If the provided account's associations count exceed the constraint of maximum token associations per account, the
 * transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.
 * On success, associations between the provided account and tokens are made and the account is ready to interact with
 * the tokens.
 */
export declare class TokenAssociateTransaction extends SingleTransactionBuilder {
    private _body;
    constructor();
    /**
     * The account to be associated with the provided tokens
     */
    setAccountId(id: AccountIdLike): this;
    /**
     * The tokens to be associated with the provided account
     */
    addTokenId(id: TokenIdLike): this;
    protected get _method(): UnaryMethodDefinition<Transaction, TransactionResponse>;
    protected _doValidate(_: string[]): void;
}
