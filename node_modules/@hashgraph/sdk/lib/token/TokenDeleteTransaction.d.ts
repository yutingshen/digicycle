import { SingleTransactionBuilder } from "../TransactionBuilder";
import { Transaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
import { TokenIdLike } from "./TokenId";
import UnaryMethodDefinition = grpc.UnaryMethodDefinition;
/**
 * Marks a token as deleted, though it will remain in the ledger.
 * The operation must be signed by the specified Admin Key of the Token. If admin key is not set, Transaction will
 * result in TOKEN_IS_IMMUTABlE. Once deleted update, mint, burn, wipe, freeze, unfreeze, grant kyc, revoke kyc and
 * token transfer transactions will resolve to TOKEN_WAS_DELETED.
 */
export declare class TokenDeleteTransaction extends SingleTransactionBuilder {
    private _body;
    constructor();
    /**
     * The token to be deleted. If invalid token is specified, transaction will result in INVALID_TOKEN_ID
     */
    setTokenId(id: TokenIdLike): this;
    protected get _method(): UnaryMethodDefinition<Transaction, TransactionResponse>;
    protected _doValidate(_: string[]): void;
}
