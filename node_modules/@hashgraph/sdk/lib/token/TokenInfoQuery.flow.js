/**
 * Flowtype definitions for TokenInfoQuery
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { QueryBuilder } from "../QueryBuilder";
import { grpc } from "@improbable-eng/grpc-web";
import { Query } from "../generated/Query_pb";
import { Response } from "../generated/Response_pb";
import { QueryHeader } from "../generated/QueryHeader_pb";
import { Hbar } from "../Hbar";
import { TokenId, TokenIdLike } from "./TokenId";
import { ResponseHeader } from "../generated/ResponseHeader_pb";
import { BaseClient } from "../BaseClient";
import { AccountId } from "../account/AccountId";
import { PublicKey } from "../crypto/PublicKey";
import BigNumber from "bignumber.js";

/**
 * Response when the client sends the node TokenGetInfoQuery.
 */
export interface TokenInfo {
  /**
   * ID of the token instance
   */
  tokenId: TokenId;

  /**
   * The name of the token. It is a string of ASCII only characters
   */
  name: string;

  /**
   * The symbol of the token. It is a UTF-8 capitalized alphabetical string
   */
  symbol: string;

  /**
   * The number of decimal places a token is divisible by
   */
  decimals: number;

  /**
   * The total supply of tokens that are currently in circulation
   */
  totalSupply: BigNumber;

  /**
   * The ID of the account which is set as Treasury
   */
  treasury: AccountId;

  /**
   * The key which can perform update/delete operations on the token. If empty, the token can be perceived as
   * immutable (not being able to be updated/deleted)
   */
  adminKey: PublicKey | null;

  /**
   * The key which can grant or revoke KYC of an account for the token's transactions. If empty, KYC is not required,
   * and KYC grant or revoke operations are not possible.
   */
  kycKey: PublicKey | null;

  /**
   * The key which can freeze or unfreeze an account for token transactions. If empty, freezing is not possible
   */
  freezeKey: PublicKey | null;

  /**
   * The key which can wipe token balance of an account. If empty, wipe is not possible
   */
  wipeKey: PublicKey | null;

  /**
   * The key which can change the supply of a token. The key is used to sign Token Mint/Burn operations
   */
  supplyKey: PublicKey | null;

  /**
   * The default Freeze status (not applicable = null, frozen = false, or unfrozen = true) of Hedera accounts relative to this token.
   * FreezeNotApplicable is returned if Token Freeze Key is empty. Frozen is returned if Token Freeze Key is set and
   * defaultFreeze is set to true. Unfrozen is returned if Token Freeze Key is set and defaultFreeze is set to false
   *       FreezeNotApplicable = null;
   *       Frozen = false;
   *       Unfrozen = true;
   */
  defaultFreezeStatus: boolean | null;

  /**
   * The default KYC status (KycNotApplicable or Revoked) of Hedera accounts relative to this token. KycNotApplicable
   * is returned if KYC key is not set, otherwise Revoked
   *       KycNotApplicable = null;
   *       Granted = false;
   *       Revoked = true;
   */
  defaultKycStatus: boolean | null;

  /**
   * Specifies whether the token was deleted or not
   */
  isDeleted: boolean;

  /**
   * An account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval
   */
  autoRenewAccount: AccountId | null;

  /**
   * The interval at which the auto-renew account will be charged to extend the token's expiry
   */
  autoRenewPeriod: number;

  /**
   * The epoch second at which the token expire: will; if an auto-renew account and period are specified,
   * this is coerced to the current epoch second plus the autoRenewPeriod
   */
  expirationTime: Date;
}
/**
 * Get all the information about an token, including the balance.
 * This does not get the list of token records.
 */
declare export class TokenInfoQuery mixins QueryBuilder<TokenInfo> {
  constructor(): this;

  /**
   * The token ID for which information is requested.
   */
  setTokenId(tokenId: TokenIdLike): this;

  /**
   * Wrapper around `QueryBuilder.getCost()`. This must exist because the cost returned
   * `QueryBuilder.getCost()` and therein the Hedera Network doesn't work for any
   * acocuntns that have been deleted. In that case we want the minimum
   * cost to be ~25 Tinybar as this seems to succeed most of the time.
   */
  getCost(client: BaseClient): Promise<Hbar>;
  _doLocalValidate(_: string[]): void;
  _getMethod(): grpc.UnaryMethodDefinition<Query, Response>;
  _getHeader(): QueryHeader;
  _mapResponseHeader(response: Response): ResponseHeader;
  _mapResponse(response: Response): TokenInfo;
}
