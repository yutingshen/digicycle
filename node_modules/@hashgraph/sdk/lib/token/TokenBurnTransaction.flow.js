/**
 * Flowtype definitions for TokenBurnTransaction
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { SingleTransactionBuilder } from "../TransactionBuilder";
import { Transaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
import { TokenIdLike } from "./TokenId";
declare var UnaryMethodDefinition: typeof grpc.UnaryMethodDefinition;
import BigNumber from "bignumber.js";

/**
 * Burns tokens from the Token's treasury Account. If no Supply Key is defined, the transaction will resolve to
 * TOKEN_HAS_NO_SUPPLY_KEY. The operation decreases the Total Supply of the Token. Total supply cannot go below zero.
 * The amount provided must be in the lowest denomination possible. Example:
 * Token A has 2 decimals. In order to burn 100 tokens, one must provide amount of 10000. In order to burn 100.55
 * tokens, one must provide amount of 10055.
 */
declare export class TokenBurnTransaction mixins SingleTransactionBuilder {
  constructor(): this;

  /**
   * The token for which to burn tokens. If token does not exist, transaction results in INVALID_TOKEN_ID
   */
  setTokenId(id: TokenIdLike): this;

  /**
   * The amount to burn from the Treasury Account. Amount must be a positive non-zero number, not bigger than the
   * token balance of the treasury account (0; balance], represented in the lowest denomination.
   */
  setAmount(amount: BigNumber | number): this;
  _method: UnaryMethodDefinition<Transaction, TransactionResponse>;
  _doValidate(_: string[]): void;
}
