/**
 * Flowtype definitions for TokenGrantKycTransaction
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { SingleTransactionBuilder } from "../TransactionBuilder";
import { Transaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
import { TokenIdLike } from "./TokenId";
import { AccountIdLike } from "../account/AccountId";
declare var UnaryMethodDefinition: typeof grpc.UnaryMethodDefinition;
/**
 * Grants KYC to the account for the given token. Must be signed by the Token's kycKey.
 * If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 * If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
 * If the provided token is not found, the transaction will resolve to INVALID_TOKEN_ID.
 * If the provided token has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
 * If an Association between the provided token and account is not found, the transaction will resolve to
 * TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.
 * If no KYC Key is defined, the transaction will resolve to TOKEN_HAS_NO_KYC_KEY.
 * Once executed the Account is marked as KYC Granted.
 */
declare export class TokenGrantKycTransaction mixins SingleTransactionBuilder {
  constructor(): this;

  /**
   * The token for which this account will be granted KYC. If token does not exist, transaction results in
   * INVALID_TOKEN_ID
   */
  setTokenId(id: TokenIdLike): this;

  /**
   * The account to be KYCed
   */
  setAccountId(id: AccountIdLike): this;
  _method: UnaryMethodDefinition<Transaction, TransactionResponse>;
  _doValidate(_: string[]): void;
}
