/**
 * Flowtype definitions for MirrorConsensusTopicResponse
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

import { ConsensusTopicResponse } from "../generated/MirrorConsensusService_pb";
import { Time } from "../Time";
declare export class ConsensusMessageChunk {
  +consensusTimestamp: Time;
  +runningHash: Uint8Array;
  +sequenceNumber: number;
  +contentSize: number;
  constructor(
    consensusTimestamp: Time,
    runningHash: Uint8Array,
    sequenceNumber: number,
    contentSize: number
  ): this;
}
declare export class MirrorConsensusTopicResponse {
  /**
   * The time at which the transaction reached consensus
   */
  +consensusTimestamp: Time;

  /**
   * The message body originally in the ConsensusSubmitMessageTransactionBody.
   *   Message size will be less than 4K.
   */
  +message: Uint8Array;

  /**
   * The running hash (SHA384) of every message.
   */
  +runningHash: Uint8Array;

  /**
   * Starts at 1 for first submitted message. Incremented on each submitted message.
   */
  +sequenceNumber: number;
  +chunks: ConsensusMessageChunk[] | null;
  constructor(message: ConsensusTopicResponse[]): this;
  constructor(message: ConsensusTopicResponse): this;
  toString(): string;
}
