/**
 * Flowtype definitions for LiveHashQuery
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IQuery">} IQuery
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IQueryHeader">} IQueryHeader
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IResponse">} IResponse
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IResponseHeader">} IResponseHeader
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ICryptoGetLiveHashQuery">} ICryptoGetLiveHashQuery
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ICryptoGetLiveHashResponse">} ICryptoGetLiveHashResponse
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ILiveHash">} ILiveHash
 */
/**
 * @typedef {$PropertyType<$Exports<"../channel/Channel.js">, "default">} Channel
 */
/**
 * @augments
 */
declare export default class LiveHashQuery mixins Query<LiveHash> {
  /**
   * @internal
   * @param {proto$IQuery} query
   * @returns {LiveHashQuery}
   */
  static _fromProtobuf(query: proto$IQuery): LiveHashQuery;

  /**
   * @param {object} [props]
   * @param {AccountId | string} [props.accountId]
   * @param {Uint8Array} [props.hash]
   */
  constructor(
    props?: {
      accountId?: string | AccountId | void,
      hash?: Uint8Array | void,
      ...
    } | void
  ): this;

  /**
   * @returns {?AccountId}
   */
  accountId: AccountId | null;

  /**
   * Set the account to which the livehash is associated.
   * @param {AccountId | string} accountId
   * @returns {this}
   */
  setAccountId(accountId: AccountId | string): this;

  /**
   * @returns {?Uint8Array}
   */
  liveHash: Uint8Array | null;

  /**
   * Set the SHA-384 data in the livehash.
   * @param {Uint8Array} hash
   * @returns {this}
   */
  setHash(hash: Uint8Array): this;

  /**
   * @protected
   * @override
   * @param {Channel} channel
   * @returns {(query: proto$IQuery) => Promise<proto$IResponse>}
   */
  _getMethod(
    channel: Channel
  ): (query: proto$IQuery) => Promise<proto$IResponse>;
}
export type Channel = $PropertyType<
  $Exports<"../channel/Channel.js">,
  "default"
>;
import LiveHash from "./LiveHash.js";
import Query from "../query/Query.js";
import AccountId from "./AccountId.js";
declare type proto$IQuery = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IQueryHeader = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IResponse = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IResponseHeader = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ICryptoGetLiveHashQuery = $Exports<
  "@hashgraph/proto/lib/proto"
>;

declare type proto$ICryptoGetLiveHashResponse = $Exports<
  "@hashgraph/proto/lib/proto"
>;

declare type proto$ILiveHash = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
