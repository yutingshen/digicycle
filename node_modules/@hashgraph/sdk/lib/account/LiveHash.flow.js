/**
 * Flowtype definitions for LiveHash
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ILiveHash">} ILiveHash
 */
/**
 * Response when the client sends the node CryptoGetInfoQuery.
 */
declare export default class LiveHash {
  /**
   * @internal
   * @param {proto$ILiveHash} liveHash
   * @returns {LiveHash}
   */
  static _fromProtobuf(liveHash: proto$ILiveHash): LiveHash;

  /**
   * @private
   * @param {object} props
   * @param {AccountId} props.accountId
   * @param {Uint8Array} props.hash
   * @param {KeyList} props.keys
   * @param {number} props.duration
   */
  constructor(): this;

  /**
   * @readonly
   */
  +accountId: AccountId;

  /**
   * @readonly
   */
  +hash: Uint8Array;

  /**
   * @readonly
   */
  +keys: KeyList;

  /**
   * @readonly
   */
  +duration: number;

  /**
   * @internal
   * @returns {proto$ILiveHash}
   */
  _toProtobuf(): proto$ILiveHash;
}
import AccountId from "./AccountId.js";
import { KeyList } from "@hashgraph/cryptography";
declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ILiveHash = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
