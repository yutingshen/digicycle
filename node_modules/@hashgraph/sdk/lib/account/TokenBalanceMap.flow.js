/**
 * Flowtype definitions for TokenBalanceMap
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITokenBalance">} ITokenBalance
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITokenID">} ITokenID
 */
declare export default class TokenBalanceMap {
  /**
   * @param {proto$ITokenBalance[]} balances
   * @returns {TokenBalanceMap}
   */
  static _fromProtobuf(balances: proto$ITokenBalance[]): TokenBalanceMap;

  /**
   * @param {Map<string, Long>} balances
   */
  constructor(balances: Map<string, Long>): this;
  _balances: Map<string, Long.Long>;

  /**
   * @param {TokenId} tokenId
   * @returns {?Long}
   */
  get(tokenId: TokenId): Long | null;

  /**
   * @returns {IterableIterator<Long>}
   */
  values(): IterableIterator<Long>;

  /**
   * @returns {IterableIterator<TokenId>}
   */
  keys(): IterableIterator<TokenId>;

  /**
   * @returns {IterableIterator<[TokenId, Long]>}
   */
  @@iterator: () => IterableIterator<[TokenId, Long]>;
}
import Long from "long";
import TokenId from "../token/TokenId.js";
declare type proto$ITokenBalance = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITokenID = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
