/**
 * Flowtype definitions for AccountBalance
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ICryptoGetAccountBalanceResponse">} ICryptoGetAccountBalanceResponse
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IKey">} IKey
 */
/**
 * @typedef {$PropertyType<$Exports<"@hashgraph/cryptography">, "Key">} Key
 * @typedef {$Exports<"long">} Long
 */
declare export default class AccountBalance {
  /**
   * @internal
   * @param {proto$ICryptoGetAccountBalanceResponse} balance
   * @returns {AccountBalance}
   */
  static _fromProtobuf(
    balance: proto$ICryptoGetAccountBalanceResponse
  ): AccountBalance;

  /**
   * @private
   * @param {object} props
   * @param {Hbar} props.hbars
   * @param {?TokenBalanceMap} props.tokens
   */
  constructor(): this;

  /**
   * The account ID for which this balancermation applies.
   * @readonly
   */
  +hbars: Hbar;

  /**
   * @readonly
   */
  +tokens: TokenBalanceMap | null;

  /**
   * @returns {proto$ICryptoGetAccountBalanceResponse}
   */
  _toProtobuf(): proto$ICryptoGetAccountBalanceResponse;
}
export type Key = $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;
export type Long = $PropertyType<$Exports<"long">, "Long">;
import Hbar from "../Hbar.js";
import TokenBalanceMap from "./TokenBalanceMap.js";
declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ICryptoGetAccountBalanceResponse = $Exports<
  "@hashgraph/proto/lib/proto"
>;

declare type proto$IKey = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
