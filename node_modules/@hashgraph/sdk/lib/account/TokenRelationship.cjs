"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _long = _interopRequireDefault(require("long"));

var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITokenRelationship} proto.ITokenRelationship
 * @typedef {import("@hashgraph/proto").TokenKycStatus} proto.TokenKycStatus
 * @typedef {import("@hashgraph/proto").TokenFreezeStatus} proto.TokenFreezeStatus
 * @typedef {import("@hashgraph/proto").ITokenID} proto.ITokenID
 */

/**
 * Token's information related to the given Account
 */
class TokenRelationship {
  /**
   * @param {object} props
   * @param {TokenId} props.tokenId
   * @param {string} props.symbol
   * @param {Long} props.balance
   * @param {boolean | null} props.kycStatus
   * @param {boolean | null} props.freezeStatus
   */
  constructor(props) {
    /**
     * The ID of the token
     *
     * @readonly
     */
    this.tokenId = props.tokenId;
    /**
     * The Symbol of the token
     *
     * @readonly
     */

    this.symbol = props.symbol;
    /**
     * The balance that the Account holds in the smallest denomination
     *
     * @readonly
     */

    this.balance = props.balance;
    /**
     * The KYC status of the account (KycNotApplicable, Granted or Revoked). If the token does
     * not have KYC key, KycNotApplicable is returned
     *
     * @readonly
     */

    this.kycStatus = props.kycStatus;
    /**
     * The Freeze status of the account (FreezeNotApplicable, Frozen or Unfrozen). If the token
     * does not have Freeze key, FreezeNotApplicable is returned
     *
     * @readonly
     */

    this.freezeStatus = props.freezeStatus;
    Object.freeze(this);
  }
  /**
   * @param {proto.ITokenRelationship} relationship
   * @returns {TokenRelationship}
   */


  static _fromProtobuf(relationship) {
    const tokenId = _TokenId.default._fromProtobuf(
    /** @type {proto.ITokenID} */
    relationship.tokenId);

    const kycStatus =
    /** @type {proto.TokenKycStatus} */
    relationship.kycStatus;
    const freezeStatus =
    /** @type {proto.TokenFreezeStatus} */
    relationship.freezeStatus;
    return new TokenRelationship({
      tokenId,
      symbol:
      /** @type {string} */
      relationship.symbol,
      balance: relationship.balance != null ? relationship.balance instanceof _long.default ? relationship.balance : _long.default.fromValue(relationship.balance) : _long.default.ZERO,
      kycStatus: kycStatus === 0 ? null : kycStatus === 2,
      freezeStatus: freezeStatus === 0 ? null : freezeStatus === 2
    });
  }

}

exports.default = TokenRelationship;