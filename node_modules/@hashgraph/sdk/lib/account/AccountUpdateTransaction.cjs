"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));

var _protobuf = require("../cryptography/protobuf.cjs");

var _AccountId = _interopRequireDefault(require("./AccountId.cjs"));

var _Timestamp = _interopRequireDefault(require("../Timestamp.cjs"));

var _long = _interopRequireDefault(require("long"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ICryptoUpdateTransactionBody} proto.ICryptoUpdateTransactionBody
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 */

/**
 * @typedef {import("@hashgraph/cryptography").Key} Key
 * @typedef {import("../channel/Channel.js").default} Channel
 */

/**
 * Change properties for the given account.
 */
class AccountUpdateTransaction extends _Transaction.default {
  /**
   * @param {object} props
   * @param {AccountId} [props.accountId]
   * @param {Key} [props.key]
   * @param {boolean} [props.receiverSignatureRequired]
   * @param {AccountId} [props.proxyAccountId]
   * @param {number | Long} [props.autoRenewPeriod]
   * @param {Timestamp | Date} [props.expirationTime]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {?AccountId}
     */

    this._accountId = null;

    if (props.accountId != null) {
      this.setAccountId(props.accountId);
    }
    /**
     * @private
     * @type {?Key}
     */


    this._key = null;

    if (props.key != null) {
      this.setKey(props.key);
    }
    /**
     * @private
     * @type {boolean}
     */


    this._receiverSignatureRequired = false;

    if (props.receiverSignatureRequired != null) {
      this.setReceiverSignatureRequired(props.receiverSignatureRequired);
    }
    /**
     * @private
     * @type {?AccountId}
     */


    this._proxyAccountId = null;

    if (props.proxyAccountId != null) {
      this.setProxyAccountId(props.proxyAccountId);
    }
    /**
     * @private
     * @type {?Long}
     */


    this._autoRenewPeriod = null;

    if (props.autoRenewPeriod != null) {
      this.setAutoRenewPeriod(props.autoRenewPeriod);
    }
    /**
     * @private
     * @type {?Timestamp}
     */


    this._expirationTime = null;

    if (props.expirationTime != null) {
      this.setExpirationTime(props.expirationTime);
    }
  }
  /**
   * @internal
   * @param {proto.TransactionBody} body
   * @returns {AccountUpdateTransaction}
   */


  static _fromProtobuf(body) {
    const update =
    /** @type {proto.ICryptoUpdateTransactionBody} */
    body.cryptoUpdateAccount;
    return new AccountUpdateTransaction({
      accountId: update.accountIDToUpdate != null ? _AccountId.default._fromProtobuf(
      /** @type {proto.IAccountID} */
      update.accountIDToUpdate) : undefined,
      key: update.key != null ? (0, _protobuf.keyFromProtobuf)(update.key) : undefined,
      receiverSignatureRequired: update.receiverSigRequired != null ? update.receiverSigRequired : undefined,
      proxyAccountId: update.proxyAccountID != null ? _AccountId.default._fromProtobuf(
      /** @type {proto.IAccountID} */
      update.proxyAccountID) : undefined,
      autoRenewPeriod: update.autoRenewPeriod != null ? update.autoRenewPeriod.seconds != null ? update.autoRenewPeriod.seconds : undefined : undefined,
      expirationTime: update.expirationTime != null ? _Timestamp.default._fromProtobuf(update.expirationTime) : undefined
    });
  }
  /**
   * @returns {?AccountId}
   */


  get accountId() {
    return this._accountId;
  }
  /**
   * Sets the account ID which is being updated in this transaction.
   *
   * @param {AccountId | string} accountId
   * @returns {AccountUpdateTransaction}
   */


  setAccountId(accountId) {
    this._requireNotFrozen();

    this._accountId = accountId instanceof _AccountId.default ? accountId : _AccountId.default.fromString(accountId);
    return this;
  }
  /**
   * @returns {?Key}
   */


  get key() {
    return this._key;
  }
  /**
   * @param {Key} key
   * @returns {this}
   */


  setKey(key) {
    this._requireNotFrozen();

    this._key = key;
    return this;
  }
  /**
   * @returns {boolean}
   */


  get receiverSignatureRequired() {
    return this._receiverSignatureRequired;
  }
  /**
   * @param {boolean} receiverSignatureRequired
   * @returns {this}
   */


  setReceiverSignatureRequired(receiverSignatureRequired) {
    this._requireNotFrozen();

    this._receiverSignatureRequired = receiverSignatureRequired;
    return this;
  }
  /**
   * @returns {?AccountId}
   */


  get proxyAccountId() {
    return this._proxyAccountId;
  }
  /**
   * @param {AccountId} proxyAccountId
   * @returns {this}
   */


  setProxyAccountId(proxyAccountId) {
    this._requireNotFrozen();

    this._proxyAccountId = proxyAccountId;
    return this;
  }
  /**
   * @returns {?Long}
   */


  get autoRenewPeriod() {
    return this._autoRenewPeriod;
  }
  /**
   * @param {number | Long} autoRenewPeriod
   * @returns {this}
   */


  setAutoRenewPeriod(autoRenewPeriod) {
    this._requireNotFrozen();

    this._autoRenewPeriod = autoRenewPeriod instanceof _long.default ? autoRenewPeriod : _long.default.fromValue(autoRenewPeriod);
    return this;
  }
  /**
   * @returns {?Timestamp}
   */


  get expirationTime() {
    return this._expirationTime;
  }
  /**
   * @param {Timestamp | Date} expirationTime
   * @returns {this}
   */


  setExpirationTime(expirationTime) {
    this._requireNotFrozen();

    this._expirationTime = expirationTime instanceof Date ? _Timestamp.default.fromDate(expirationTime) : expirationTime;
    return this;
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.ITransaction} request
   * @returns {Promise<proto.ITransactionResponse>}
   */


  _execute(channel, request) {
    return channel.crypto.updateAccount(request);
  }
  /**
   * @override
   * @protected
   * @returns {NonNullable<proto.TransactionBody["data"]>}
   */


  _getTransactionDataCase() {
    return "cryptoUpdateAccount";
  }
  /**
   * @override
   * @protected
   * @returns {proto.ICryptoUpdateTransactionBody}
   */


  _makeTransactionData() {
    return {
      accountIDToUpdate: this._accountId != null ? this._accountId._toProtobuf() : null,
      key: this._key != null ? (0, _protobuf.keyToProtobuf)(this._key) : null,
      expirationTime: this._expirationTime != null ? this._expirationTime._toProtobuf() : null,
      proxyAccountID: this._proxyAccountId != null ? this._proxyAccountId._toProtobuf() : null,
      autoRenewPeriod: this._autoRenewPeriod == null ? null : {
        seconds: this._autoRenewPeriod
      },
      receiverSigRequiredWrapper: this._receiverSignatureRequired == null ? null : {
        value: this._receiverSignatureRequired
      }
    };
  }

}

exports.default = AccountUpdateTransaction;

_Transaction.TRANSACTION_REGISTRY.set("cryptoUpdateAccount", // eslint-disable-next-line @typescript-eslint/unbound-method
AccountUpdateTransaction._fromProtobuf);