"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Hbar = _interopRequireDefault(require("../Hbar.cjs"));

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _Transfer = _interopRequireDefault(require("../Transfer.cjs"));

var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").ICryptoTransferTransactionBody} proto.ICryptoTransferTransactionBody
 * @typedef {import("@hashgraph/proto").IAccountID} proto.IAccountID
 */

/**
 * @typedef {import("@hashgraph/cryptography").Key} Key
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("../channel/Channel.js").default} Channel
 */

/**
 * @typedef {object} TransferObject
 * @property {AccountId | string} accountId
 * @property {number | string | Long | BigNumber | Hbar} amount
 */

/**
 * Transfer cryptocurrency from some accounts to other accounts.
 */
class CryptoTransferTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {(Transfer | TransferObject)[]} [props.transfers]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {Transfer[]}
     */

    this._transfers = [];

    if (props.transfers != null) {
      this._transfers = props.transfers.map(transfer => {
        if (transfer instanceof _Transfer.default) {
          return transfer;
        } else {
          const amount = transfer.amount instanceof _Hbar.default ? transfer.amount : new _Hbar.default(transfer.amount);
          return new _Transfer.default({
            accountId: transfer.accountId,
            amount
          });
        }
      });
    }
  }
  /**
   * @internal
   * @param {proto.TransactionBody} body
   * @returns {CryptoTransferTransaction}
   */


  static _fromProtobuf(body) {
    const update =
    /** @type {proto.ICryptoTransferTransactionBody} */
    body.cryptoTransfer;
    return new CryptoTransferTransaction({
      transfers: update.transfers != null ? update.transfers.accountAmounts != null ? update.transfers.accountAmounts.map(aa => _Transfer.default._fromProtobuf(aa)) : undefined : undefined
    });
  }
  /**
   * @returns {Transfer[]}
   */


  get transfers() {
    return this._transfers;
  }
  /**
   * @param {AccountId | string} accountId
   * @param {number | string | Long | BigNumber | Hbar} amount
   * @returns {CryptoTransferTransaction}
   */


  addTransfer(accountId, amount) {
    this._requireNotFrozen();

    this._transfers.push(new _Transfer.default({
      accountId: accountId instanceof _AccountId.default ? accountId : _AccountId.default.fromString(accountId),
      amount
    }));

    return this;
  }
  /**
   * @param {AccountId | string} accountId
   * @param {number | string | Long | BigNumber | Hbar} amount
   * @returns {CryptoTransferTransaction}
   */


  addSender(accountId, amount) {
    const value = amount instanceof _Hbar.default ? amount : new _Hbar.default(amount);
    return this.addTransfer(accountId, value.negated());
  }
  /**
   * @param {AccountId | string} accountId
   * @param {number | string | Long | BigNumber | Hbar} amount
   * @returns {CryptoTransferTransaction}
   */


  addRecipient(accountId, amount) {
    return this.addTransfer(accountId, amount);
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.ITransaction} request
   * @returns {Promise<proto.ITransactionResponse>}
   */


  _execute(channel, request) {
    return channel.crypto.cryptoTransfer(request);
  }
  /**
   * @override
   * @protected
   * @returns {NonNullable<proto.TransactionBody["data"]>}
   */


  _getTransactionDataCase() {
    return "cryptoTransfer";
  }
  /**
   * @override
   * @protected
   * @returns {proto.ICryptoTransferTransactionBody}
   */


  _makeTransactionData() {
    return {
      transfers: {
        accountAmounts: this._transfers.map(transfer => transfer._toProtobuf())
      }
    };
  }

}

exports.default = CryptoTransferTransaction;

_Transaction.TRANSACTION_REGISTRY.set("cryptoTransfer", // eslint-disable-next-line @typescript-eslint/unbound-method
CryptoTransferTransaction._fromProtobuf);