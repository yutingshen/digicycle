/**
 * Flowtype definitions for AccountInfo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountInfo">} IAccountInfo
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITimestamp">} ITimestamp
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IAccountID">} IAccountID
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IKey">} IKey
 */
/**
 * @typedef {$PropertyType<$Exports<"@hashgraph/cryptography">, "Key">} Key
 */
/**
 * Current information about an account, including the balance.
 */
declare export default class AccountInfo {
  /**
   * @internal
   * @param {proto$IAccountInfo} info
   * @returns {AccountInfo}
   */
  static _fromProtobuf(info: proto$IAccountInfo): AccountInfo;

  /**
   * @private
   * @param {object} props
   * @param {AccountId} props.accountId
   * @param {?string} props.contractAccountId
   * @param {boolean} props.isDeleted
   * @param {?AccountId} props.proxyAccountId
   * @param {Hbar} props.proxyReceived
   * @param {Key} props.key
   * @param {Hbar} props.balance
   * @param {Hbar} props.sendRecordThreshold
   * @param {Hbar} props.receiveRecordThreshold
   * @param {boolean} props.isReceiverSignatureRequired
   * @param {Time} props.expirationTime
   * @param {Long} props.autoRenewPeriod
   * @param {LiveHash[]} props.liveHashes
   * @param {TokenRelationshipMap} props.tokenRelationships
   */
  constructor(): this;

  /**
   * The account ID for which this information applies.
   * @readonly
   */
  +accountId: AccountId;

  /**
   * The Contract Account ID comprising of both the contract instance and the cryptocurrency
   * account owned by the contract instance, in the format used by Solidity.
   * @readonly
   */
  +contractAccountId: string | null;

  /**
   * If true, then this account has been deleted, it will disappear when it expires, and
   * all transactions for it will fail except the transaction to extend its expiration date.
   * @readonly
   */
  +isDeleted: boolean;

  /**
   * The Account ID of the account to which this is proxy staked. If proxyAccountID is null,
   * or is an invalid account, or is an account that isn't a node, then this account is
   * automatically proxy staked to a node chosen by the network, but without earning payments.
   * If the proxyAccountID account refuses to accept proxy staking , or if it is not currently
   * running a node, then it will behave as if proxyAccountID was null.
   * @readonly
   */
  +proxyAccountId: AccountId | null;

  /**
   * The total number of tinybars proxy staked to this account.
   * @readonly
   */
  +proxyReceived: Hbar;

  /**
   * The key for the account, which must sign in order to transfer out, or to modify the account
   * in any way other than extending its expiration date.
   * @readonly
   */
  +key: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;

  /**
   * The current balance of account.
   * @readonly
   */
  +balance: Hbar;

  /**
   * The threshold amount (in tinybars) for which an account record is created (and this account
   * charged for them) for any send/withdraw transaction.
   * @readonly
   */
  +sendRecordThreshold: Hbar;

  /**
   * The threshold amount (in tinybars) for which an account record is created
   * (and this account charged for them) for any transaction above this amount.
   * @readonly
   */
  +receiveRecordThreshold: Hbar;

  /**
   * If true, no transaction can transfer to this account unless signed by this account's key.
   * @readonly
   */
  +isReceiverSignatureRequired: boolean;

  /**
   * The TimeStamp time at which this account is set to expire.
   * @readonly
   */
  +expirationTime: Time;

  /**
   * The duration for expiration time will extend every this many seconds. If there are
   * insufficient funds, then it extends as long as possible. If it is empty when it
   * expires, then it is deleted.
   * @readonly
   */
  +autoRenewPeriod: Long.Long;

  /**
   * @readonly
   */
  +liveHashes: LiveHash[];

  /**
   * @readonly
   */
  +tokenRelationships: TokenRelationshipMap;

  /**
   * @returns {proto$IAccountInfo}
   */
  _toProtobuf(): proto$IAccountInfo;
}
export type Key = $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;
import AccountId from "./AccountId.js";
import Hbar from "../Hbar.js";
import Time from "../Timestamp.js";
import Long from "long";
import LiveHash from "./LiveHash.js";
import TokenRelationshipMap from "./TokenRelationshipMap.js";
declare type proto$IAccountInfo = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$ITimestamp = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IAccountID = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IKey = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
