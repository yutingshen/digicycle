"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromString = fromString;
exports.default = void 0;

var _long = _interopRequireDefault(require("long"));

var hex = _interopRequireWildcard(require("./encoding/hex.cjs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {object} IEntityId
 * @property {number | Long} num
 * @property {(number | Long)=} shard
 * @property {(number | Long)=} realm
 */

/**
 * @abstract
 * @template T
 */
class EntityId {
  /**
   * @param {number | Long | IEntityId} properties
   * @param {(number | null | Long)=} realm
   * @param {(number | null | Long)=} num
   */
  constructor(properties, realm, num) {
    if (typeof properties === "number" || properties instanceof _long.default) {
      if (realm == null) {
        /**
         * @readonly
         * @type {Long}
         */
        this.realm = _long.default.ZERO;
        /**
         * @readonly
         * @type {Long}
         */

        this.shard = _long.default.ZERO;
        /**
         * @readonly
         * @type {Long}
         */

        this.num = _long.default.fromValue(properties);
      } else {
        this.shard = _long.default.fromValue(properties);
        this.realm = _long.default.fromValue(realm);
        this.num = num != null ? _long.default.fromValue(num) : _long.default.ZERO;
      }
    } else {
      this.shard = _long.default.fromValue(properties.shard != null ? properties.shard : 0);
      this.realm = _long.default.fromValue(properties.realm != null ? properties.realm : 0);
      this.num = _long.default.fromValue(properties.num != null ? properties.num : 0);
    }
  }
  /**
   * @abstract
   * @internal
   * @returns {T}
   */


  _toProtobuf() {
    throw new Error("not implemented");
  }
  /**
   * @returns {string}
   */


  toSolidityAddress() {
    const buffer = new Uint8Array(20);
    buffer.set(this.shard.toBytesBE().slice(4, 8), 0);
    buffer.set(this.realm.toBytesBE(), 4);
    buffer.set(this.num.toBytesBE(), 12);
    return "0x" + hex.encode(buffer);
  }
  /**
   * @override
   */


  toString() {
    return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;
  }
  /**
   * @param {this} other
   * @returns {boolean}
   */


  equals(other) {
    return this.shard.eq(other.shard) && this.realm.eq(other.realm) && this.num.eq(other.num);
  }

}
/**
 * @param {string} text
 * @returns {[number, number, number]}
 */


exports.default = EntityId;

function fromString(text) {
  const components = text.split(".").map(Number);
  let shard = 0;
  let realm = 0;
  let num;

  if (components.length === 1) {
    num = components[0];
  } else if (components.length === 3) {
    shard = components[0];
    realm = components[1];
    num = components[2];
  } else {
    throw new Error("invalid format for entity ID");
  }

  return [shard, realm, num];
}