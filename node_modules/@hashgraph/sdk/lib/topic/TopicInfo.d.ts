/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IConsensusTopicInfo} proto.IConsensusTopicInfo
 * @typedef {import("@hashgraph/proto").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse
 * @typedef {import("@hashgraph/proto").ITopicID} proto.ITopicID
 */
/**
 * @typedef {import("@hashgraph/cryptography").Key} Key
 */
/**
 * Current state of a topic.
 */
export default class TopicInfo {
    /**
     * @internal
     * @param {proto.IConsensusGetTopicInfoResponse} infoResponse
     * @returns {TopicInfo}
     */
    static _fromProtobuf(infoResponse: proto.IConsensusGetTopicInfoResponse): TopicInfo;
    /**
     * @private
     * @param {object} props
     * @param {TopicId} props.topicId
     * @param {string} props.topicMemo
     * @param {Uint8Array} props.runningHash
     * @param {Long} props.sequenceNumber
     * @param {Timestamp} props.expirationTime
     * @param {?Key} props.adminKey
     * @param {?Key} props.submitKey
     * @param {number} props.autoRenewPeriod
     * @param {?AccountId} props.autoRenewAccountId
     */
    private constructor();
    /**
     * The ID of the topic for which information is requested.
     *
     * @readonly
     */
    readonly topicId: TopicId;
    /**
     * Short publicly visible memo about the topic. No guarantee of uniqueness.
     *
     * @readonly
     */
    readonly topicMemo: string;
    /**
     * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).
     *
     * @readonly
     */
    readonly runningHash: Uint8Array;
    /**
     * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.
     *
     * @readonly
     */
    readonly sequenceNumber: Long.Long;
    /**
     * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.
     *
     * @readonly
     */
    readonly expirationTime: Timestamp;
    /**
     * Access control for update/delete of the topic. Null if there is no key.
     *
     * @readonly
     */
    readonly adminKey: import("@hashgraph/cryptography").Key | null;
    /**
     * Access control for ConsensusService.submitMessage. Null if there is no key.
     *
     * @readonly
     */
    readonly submitKey: import("@hashgraph/cryptography").Key | null;
    /**
     * @readonly
     */
    readonly autoRenewPeriod: number;
    /**
     * @readonly
     */
    readonly autoRenewAccountId: AccountId | null;
    /**
     * @internal
     * @returns {proto.IConsensusGetTopicInfoResponse}
     */
    _toProtobuf(): proto.IConsensusGetTopicInfoResponse;
}
export type Key = import("@hashgraph/cryptography").Key;
import TopicId from "./TopicId.js";
import Long from "long";
import Timestamp from "../Timestamp.js";
import AccountId from "../account/AccountId.js";
declare namespace proto {
    type IConsensusTopicInfo = import("@hashgraph/proto/lib/proto").proto.IConsensusTopicInfo;
    type IConsensusGetTopicInfoResponse = import("@hashgraph/proto/lib/proto").proto.IConsensusGetTopicInfoResponse;
    type ITopicID = import("@hashgraph/proto/lib/proto").proto.ITopicID;
}
export {};
