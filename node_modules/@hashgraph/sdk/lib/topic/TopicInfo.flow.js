/**
 * Flowtype definitions for TopicInfo
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @namespace proto
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IConsensusTopicInfo">} IConsensusTopicInfo
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "IConsensusGetTopicInfoResponse">} IConsensusGetTopicInfoResponse
 * @typedef {$PropertyType<$Exports<"@hashgraph/proto">, "ITopicID">} ITopicID
 */
/**
 * @typedef {$PropertyType<$Exports<"@hashgraph/cryptography">, "Key">} Key
 */
/**
 * Current state of a topic.
 */
declare export default class TopicInfo {
  /**
   * @internal
   * @param {proto$IConsensusGetTopicInfoResponse} infoResponse
   * @returns {TopicInfo}
   */
  static _fromProtobuf(
    infoResponse: proto$IConsensusGetTopicInfoResponse
  ): TopicInfo;

  /**
   * @private
   * @param {object} props
   * @param {TopicId} props.topicId
   * @param {string} props.topicMemo
   * @param {Uint8Array} props.runningHash
   * @param {Long} props.sequenceNumber
   * @param {Timestamp} props.expirationTime
   * @param {?Key} props.adminKey
   * @param {?Key} props.submitKey
   * @param {number} props.autoRenewPeriod
   * @param {?AccountId} props.autoRenewAccountId
   */
  constructor(): this;

  /**
   * The ID of the topic for which information is requested.
   * @readonly
   */
  +topicId: TopicId;

  /**
   * Short publicly visible memo about the topic. No guarantee of uniqueness.
   * @readonly
   */
  +topicMemo: string;

  /**
   * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).
   * @readonly
   */
  +runningHash: Uint8Array;

  /**
   * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.
   * @readonly
   */
  +sequenceNumber: Long.Long;

  /**
   * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.
   * @readonly
   */
  +expirationTime: Timestamp;

  /**
   * Access control for update/delete of the topic. Null if there is no key.
   * @readonly
   */
  +adminKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key"> | null;

  /**
   * Access control for ConsensusService.submitMessage. Null if there is no key.
   * @readonly
   */
  +submitKey: $PropertyType<$Exports<"@hashgraph/cryptography">, "Key"> | null;

  /**
   * @readonly
   */
  +autoRenewPeriod: number;

  /**
   * @readonly
   */
  +autoRenewAccountId: AccountId | null;

  /**
   * @internal
   * @returns {proto$IConsensusGetTopicInfoResponse}
   */
  _toProtobuf(): proto$IConsensusGetTopicInfoResponse;
}
export type Key = $PropertyType<$Exports<"@hashgraph/cryptography">, "Key">;
import TopicId from "./TopicId.js";
import Long from "long";
import Timestamp from "../Timestamp.js";
import AccountId from "../account/AccountId.js";
declare type proto$IConsensusTopicInfo = $Exports<"@hashgraph/proto/lib/proto">;

declare type proto$IConsensusGetTopicInfoResponse = $Exports<
  "@hashgraph/proto/lib/proto"
>;

declare type proto$ITopicID = $Exports<"@hashgraph/proto/lib/proto">;
declare export {};
