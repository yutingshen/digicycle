"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Transaction = _interopRequireWildcard(require("../transaction/Transaction.cjs"));

var _TopicId = _interopRequireDefault(require("./TopicId.cjs"));

var utf8 = _interopRequireWildcard(require("../encoding/utf8.cjs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IConsensusSubmitMessageTransactionBody} proto.IConsensusSubmitMessageTransactionBody
 * @typedef {import("@hashgraph/proto").ITransaction} proto.ITransaction
 * @typedef {import("@hashgraph/proto").TransactionBody} proto.TransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionBody} proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").ITransactionResponse} proto.ITransactionResponse
 */

/**
 * @typedef {import("../channel/Channel.js").default} Channel
 */
class TopicMessageSubmitTransaction extends _Transaction.default {
  /**
   * @param {object} props
   * @param {TopicId} [props.topicId]
   * @param {Uint8Array | string} [props.message]
   */
  constructor(props = {}) {
    super();
    /**
     * @private
     * @type {?TopicId}
     */

    this._topicId = null;

    if (props.topicId != null) {
      this.setTopicId(props.topicId);
    }
    /**
     * @private
     * @type {?Uint8Array}
     */


    this._message = null;

    if (props.message != null) {
      this.setMessage(props.message);
    }
  }
  /**
   * @internal
   * @param {proto.TransactionBody} body
   * @returns {TopicMessageSubmitTransaction}
   */


  static _fromProtobuf(body) {
    const message =
    /** @type {proto.IConsensusSubmitMessageTransactionBody} */
    body.consensusSubmitMessage;
    return new TopicMessageSubmitTransaction({
      topicId: message.topicID != null ? _TopicId.default._fromProtobuf(message.topicID) : undefined,
      message: message.message != null ? message.message : undefined
    });
  }
  /**
   * @returns {?TopicId}
   */


  get topicId() {
    return this._topicId;
  }
  /**
   * @param {TopicId} topicId
   * @returns {TopicMessageSubmitTransaction}
   */


  setTopicId(topicId) {
    this._requireNotFrozen();

    this._topicId = topicId;
    return this;
  }
  /**
   * @returns {?Uint8Array}
   */


  get message() {
    return this._message;
  }
  /**
   * @param {string | Uint8Array} message
   * @returns {TopicMessageSubmitTransaction}
   */


  setMessage(message) {
    this._requireNotFrozen();

    this._message = typeof message === "string" ? utf8.encode(message) : message;
    return this;
  }
  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {proto.ITransaction} request
   * @returns {Promise<proto.ITransactionResponse>}
   */


  _execute(channel, request) {
    return channel.consensus.submitMessage(request);
  }
  /**
   * @override
   * @protected
   * @returns {NonNullable<proto.TransactionBody["data"]>}
   */


  _getTransactionDataCase() {
    return "consensusSubmitMessage";
  }
  /**
   * @override
   * @protected
   * @returns {proto.IConsensusSubmitMessageTransactionBody}
   */


  _makeTransactionData() {
    return {
      topicID: this._topicId != null ? this._topicId._toProtobuf() : null,
      message: this._message
    };
  }

}

exports.default = TopicMessageSubmitTransaction;

_Transaction.TRANSACTION_REGISTRY.set("consensusSubmitMessage", // eslint-disable-next-line @typescript-eslint/unbound-method
TopicMessageSubmitTransaction._fromProtobuf);