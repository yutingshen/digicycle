"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TopicId = _interopRequireDefault(require("./TopicId.cjs"));

var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));

var _Timestamp = _interopRequireDefault(require("../Timestamp.cjs"));

var _protobuf = require("../cryptography/protobuf.cjs");

var _long = _interopRequireDefault(require("long"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").IConsensusTopicInfo} proto.IConsensusTopicInfo
 * @typedef {import("@hashgraph/proto").IConsensusGetTopicInfoResponse} proto.IConsensusGetTopicInfoResponse
 * @typedef {import("@hashgraph/proto").ITopicID} proto.ITopicID
 */

/**
 * @typedef {import("@hashgraph/cryptography").Key} Key
 */

/**
 * Current state of a topic.
 */
class TopicInfo {
  /**
   * @private
   * @param {object} props
   * @param {TopicId} props.topicId
   * @param {string} props.topicMemo
   * @param {Uint8Array} props.runningHash
   * @param {Long} props.sequenceNumber
   * @param {Timestamp} props.expirationTime
   * @param {?Key} props.adminKey
   * @param {?Key} props.submitKey
   * @param {number} props.autoRenewPeriod
   * @param {?AccountId} props.autoRenewAccountId
   */
  constructor(props) {
    /**
     * The ID of the topic for which information is requested.
     *
     * @readonly
     */
    this.topicId = props.topicId;
    /**
     * Short publicly visible memo about the topic. No guarantee of uniqueness.
     *
     * @readonly
     */

    this.topicMemo = props.topicMemo;
    /**
     * SHA-384 running hash of (previousRunningHash, topicId, consensusTimestamp, sequenceNumber, message).
     *
     * @readonly
     */

    this.runningHash = props.runningHash;
    /**
     * Sequence number (starting at 1 for the first submitMessage) of messages on the topic.
     *
     * @readonly
     */

    this.sequenceNumber = props.sequenceNumber;
    /**
     * Effective consensus timestamp at (and after) which submitMessage calls will no longer succeed on the topic.
     *
     * @readonly
     */

    this.expirationTime = props.expirationTime;
    /**
     * Access control for update/delete of the topic. Null if there is no key.
     *
     * @readonly
     */

    this.adminKey = props.adminKey;
    /**
     * Access control for ConsensusService.submitMessage. Null if there is no key.
     *
     * @readonly
     */

    this.submitKey = props.submitKey;
    /**
     * @readonly
     */

    this.autoRenewPeriod = props.autoRenewPeriod;
    /**
     * @readonly
     */

    this.autoRenewAccountId = props.autoRenewAccountId;
    Object.freeze(this);
  }
  /**
   * @internal
   * @param {proto.IConsensusGetTopicInfoResponse} infoResponse
   * @returns {TopicInfo}
   */


  static _fromProtobuf(infoResponse) {
    const info =
    /** @type {proto.IConsensusTopicInfo} */
    infoResponse.topicInfo;
    return new TopicInfo({
      topicId: _TopicId.default._fromProtobuf(
      /** @type {proto.ITopicID} */
      infoResponse.topicID),
      topicMemo: info.memo != null ? info.memo : "",
      runningHash: info.runningHash != null ? info.runningHash : new Uint8Array(),
      sequenceNumber: info.sequenceNumber != null ? info.sequenceNumber instanceof _long.default ? info.sequenceNumber : _long.default.fromValue(info.sequenceNumber) : _long.default.ZERO,
      expirationTime: info.expirationTime != null ? _Timestamp.default._fromProtobuf(info.expirationTime) : new _Timestamp.default(0, 0),
      adminKey: info.adminKey != null ? (0, _protobuf.keyFromProtobuf)(info.adminKey) : null,
      submitKey: info.submitKey != null ? (0, _protobuf.keyFromProtobuf)(info.submitKey) : null,
      autoRenewPeriod: info.autoRenewPeriod != null ? info.autoRenewPeriod.seconds != null ? info.autoRenewPeriod.seconds instanceof _long.default ? info.autoRenewPeriod.seconds.toNumber() : info.autoRenewPeriod.seconds : 0 : 0,
      autoRenewAccountId: info.autoRenewAccount != null ? _AccountId.default._fromProtobuf(info.autoRenewAccount) : null
    });
  }
  /**
   * @internal
   * @returns {proto.IConsensusGetTopicInfoResponse}
   */


  _toProtobuf() {
    return {
      topicID: this.topicId._toProtobuf(),
      topicInfo: {
        memo: this.topicMemo,
        runningHash: this.runningHash,
        sequenceNumber: this.sequenceNumber,
        expirationTime: this.expirationTime._toProtobuf(),
        adminKey: this.adminKey != null ? (0, _protobuf.keyToProtobuf)(this.adminKey) : null,
        submitKey: this.submitKey != null ? (0, _protobuf.keyToProtobuf)(this.submitKey) : null,
        autoRenewPeriod: {
          seconds: _long.default.fromNumber(this.autoRenewPeriod)
        },
        autoRenewAccount: this.autoRenewAccountId != null ? this.autoRenewAccountId._toProtobuf() : null
      }
    };
  }

}

exports.default = TopicInfo;