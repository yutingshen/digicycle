/**
 * Flowtype definitions for Client
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

/**
 * @typedef {$PropertyType<$Exports<"../channel/Channel.js">, "default">} Channel
 * @typedef {$PropertyType<$Exports<"../channel/MirrorChannel.js">, "default">} MirrorChannel
 */
/**
 * @typedef {"mainnet" | "testnet" | "previewnet"} NetworkName
 */
/**
 * @typedef Operator
 */
/**
 * @typedef ClientOperator
 */
/**
 * @typedef ClientConfiguration
 */
/**
 * @abstract
 * @template
 * @template
 */
declare export default class Client<
  ChannelT: $PropertyType<$Exports<"../channel/Channel.js">, "default">,
  MirrorChannelT: $PropertyType<
    $Exports<"../channel/MirrorChannel.js">,
    "default"
  >
> {
  /**
   * @protected
   * @hideconstructor
   * @param {ClientConfiguration} [props]
   */
  constructor(): this;

  /**
   * @internal
   * @type {?ClientOperator}
   */
  _operator: ClientOperator | null;

  /**
 * @param {{
[key: string]: (string | AccountId),...
}} network
 * @returns {void}
 */
  setNetwork(network: {
    [key: string]: string | AccountId,
    ...
  }): void;

  /**
   * @param {string[]} mirrorNetwork
   * @returns {void}
   */
  setMirrorNetwork(mirrorNetwork: string[]): void;

  /**
   * Set the account that will, by default, pay for transactions and queries built with this client.
   * @param {AccountId | string} accountId
   * @param {PrivateKey | string} privateKey
   * @returns {this}
   */
  setOperator(
    accountId: AccountId | string,
    privateKey: PrivateKey | string
  ): this;

  /**
   * Sets the account that will, by default, pay for transactions and queries built with
   * this client.
   * @param {AccountId | string} accountId
   * @param {PublicKey | string} publicKey
   * @param {(message: Uint8Array) => Promise<Uint8Array>} transactionSigner
   * @returns {this}
   */
  setOperatorWith(
    accountId: AccountId | string,
    publicKey: PublicKey | string,
    transactionSigner: (message: Uint8Array) => Promise<Uint8Array>
  ): this;

  /**
   * @returns {?AccountId}
   */
  operatorAccountId: AccountId | null;

  /**
   * @returns {?PublicKey}
   */
  operatorPublicKey: PublicKey | null;

  /**
   * @returns {Hbar}
   */
  maxTransactionFee: Hbar;

  /**
   * Set the maximum fee to be paid for transactions
   * executed by this client.
   * @param {Hbar} maxTransactionFee
   * @returns {this}
   */
  setMaxTransactionFee(maxTransactionFee: Hbar): this;

  /**
   * @returns {Hbar}
   */
  maxQueryPayment: Hbar;

  /**
   * Set the maximum payment allowable for queries.
   * @param {Hbar} maxQueryPayment
   * @returns {Client<ChannelT, MirrorChannelT>}
   */
  setMaxQueryPayment(maxQueryPayment: Hbar): Client<ChannelT, MirrorChannelT>;

  /**
   * @returns {void}
   */
  close(): void;

  /**
   * @internal
   * @returns {number}
   */
  _getNumberOfNodesForTransaction(): number;

  /**
   * @internal
   * @returns {AccountId}
   */
  _getNextNodeId(): AccountId;

  /**
   * @internal
   * @param {AccountId} nodeId
   * @returns {ChannelT}
   */
  _getNetworkChannel(nodeId: AccountId): ChannelT;

  /**
   * @internal
   * @returns {string}
   */
  _getNextMirrorAddress(): string;

  /**
   * @internal
   * @param {string} address
   * @returns {MirrorChannelT}
   */
  _getMirrorChannel(address: string): MirrorChannelT;

  /**
   * @abstract
   * @param {string} address
   * @returns {ChannelT}
   */
  _createNetworkChannel(address: string): ChannelT;

  /**
   * @abstract
   * @param {string} address
   * @returns {MirrorChannelT}
   */
  _createMirrorNetworkChannel(address: string): MirrorChannelT;
}
export type Channel = $PropertyType<
  $Exports<"../channel/Channel.js">,
  "default"
>;
export type MirrorChannel = $PropertyType<
  $Exports<"../channel/MirrorChannel.js">,
  "default"
>;
export type NetworkName = "mainnet" | "testnet" | "previewnet";
export type Operator = {
  privateKey: string | PrivateKey,
  accountId: string | AccountId,
  ...
};
export type ClientOperator = {
  publicKey: PublicKey,
  accountId: AccountId,
  transactionSigner: (message: Uint8Array) => Promise<Uint8Array>,
  ...
};
export type ClientConfiguration = {
  network:
    | {
        [key: string]: string | AccountId,
        ...
      }
    | "mainnet"
    | "testnet"
    | "previewnet",
  mirrorNetwork?: string | string[] | void,
  operator?: Operator | void,
  ...
};
import AccountId from "../account/AccountId.js";
import { PrivateKey } from "@hashgraph/cryptography";
import { PublicKey } from "@hashgraph/cryptography";
import Hbar from "../Hbar.js";
