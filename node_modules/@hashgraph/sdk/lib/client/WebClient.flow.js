/**
 * Flowtype definitions for WebClient
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

declare var Network: typeof npm$namespace$Network;

declare var npm$namespace$Network: {|
  fromName: typeof Network$fromName,
  MAINNET: typeof Network$MAINNET,
  TESTNET: typeof Network$TESTNET,
  PREVIEWNET: typeof Network$PREVIEWNET,
|};

/**
 * @param {string} name
 * @returns {{
[key: string]: (string | AccountId),...
}}
 */
declare function Network$fromName(
  name: string
): {
  [key: string]: string | AccountId,
  ...
};

/**
 * @param {string} name
 * @returns {{
[key: string]: (string | AccountId),...
}}
 */
declare function Network$fromName(
  name: string
): {
  [key: string]: string | AccountId,
  ...
};

declare var Network$MAINNET: {
  "https://grpc-web.myhbarwallet.com": AccountId,
  ...
};

declare var Network$TESTNET: {
  "https://grpc-web.testnet.myhbarwallet.com": AccountId,
  ...
};

declare var Network$PREVIEWNET: {
  "https://grpc-web.previewnet.myhbarwallet.com": AccountId,
  ...
};
/**
 * @augments
 */
declare export default class WebClient mixins Client<WebChannel, any> {
  /**
   * @param {string | ClientConfiguration} data
   * @returns {WebClient}
   */
  static fromConfig(data: string | ClientConfiguration): WebClient;

  /**
 * Construct a client for a specific network.
 * 
 * It is the responsibility of the caller to ensure that all nodes in the map are part of the
 * same Hedera network. Failure to do so will result in undefined behavior.
 * 
 * The client will load balance all requests to Hedera using a simple round-robin scheme to
 * chose nodes to send transactions to. For one transaction, at most 1/3 of the nodes will be
 * tried.
 * @param {{
[key: string]: (string | AccountId),...
} | $PropertyType<$Exports<"./Client.js">, "NetworkName">} network
 * @returns {WebClient}
 */
  static forNetwork(
    network:
      | "mainnet"
      | "testnet"
      | "previewnet"
      | {
          [key: string]: string | AccountId,
          ...
        }
  ): WebClient;

  /**
   * Construct a Hedera client pre-configured for Mainnet access.
   * @returns {WebClient}
   */
  static forMainnet(): WebClient;

  /**
   * Construct a Hedera client pre-configured for Testnet access.
   * @returns {WebClient}
   */
  static forTestnet(): WebClient;

  /**
   * Construct a Hedera client pre-configured for Previewnet access.
   * @returns {WebClient}
   */
  static forPreviewnet(): WebClient;

  /**
   * @param {ClientConfiguration} [props]
   */
  constructor(
    props?: $PropertyType<$Exports<"./Client.js">, "ClientConfiguration"> | void
  ): this;
}
export type ClientConfiguration = {
  network:
    | {
        [key: string]: string | AccountId,
        ...
      }
    | "mainnet"
    | "testnet"
    | "previewnet",
  mirrorNetwork?: string | string[] | void,
  operator?: $PropertyType<$Exports<"./Client.js">, "Operator"> | void,
  ...
};
import AccountId from "../account/AccountId.js";
import WebChannel from "../channel/WebChannel.js";
import Client from "./Client.js";
